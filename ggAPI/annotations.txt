======================================================
## gameJSON[[5]] --> LOST
======================================================
- List of two. Each entry one of the players.
- x <- gameJSON[["Lost"]][[1/2]]
- Game Time In seconds/10+1 => number of rows for each player
- First 100 lost -> 4:20 minutes
                 -> 260 seconds
                 -> 260/10 = 26 row.
                 -> 26+1 (initial status) = 27 row.
- 27 row -> (27-1)*10 = 260 seconds.

======================================================
## gameJSON[[6]] --> ARMIES_BY_FRAME
======================================================
- List of two. Each entry one of the players
- x <- gameJSON[["armies_by_frame"]][[1/2]]
- Returns a matrix of three columns
    - Unit name
    - Frame in which it was craeted (completed)?
    - Frame in which it died?
- Transformed units just change the name. Not the creation/Death time.
- Then the name does not mean when were they transformed!!

======================================================
## gameJSON[[8]] --> UPGRADES
======================================================
- List of two. Each entry one of the players
- x <- gameJSON[["upgrades"]][[1/2]]
- Returns a matrix of two columns. Name of the upgrades and frame?

======================================================
## gameJSON[[9]] --> WORKERS ACTIVE COUNT
======================================================
- List of two. Each entry one of the players.
- x <- gameJSON[["WorkersActiveCount"]][[1/2]]
- Returns an array. Max elements = Game Time In seconds/10+1
- 3d element => (3-1)*10 = 20 seconds.
      - Number of workers at 20 seconds mark.
- Carefull with this value because for zerg, building, reduces one.
  No way to know if kill / building?Â¿ TT

======================================================
## gameJSON[[11]] --> MINERALS CURRENT
======================================================
- List of two. Each entry one of the players.
- x <- gameJSON[["MineralsCurrent"]][[1/2]]
- Returns an array. Max elements = Game Time In seconds/10+1
- 3d element => (3-1)*10 = 20 seconds.
      - Number of minearls at 20 seconds mark.

======================================================
## gameJSON[[12]] --> MINERALS COLLECTION RATE
======================================================
- List of two. Each entry one of the players.
- x <- gameJSON[["MineralsCollectionRate"]][[1/2]]
- Returns an array. Max elements = Game Time In seconds/10+1
- 3d element => (3-1)*10 = 20 seconds.
      - Number of minerals collection rate at 20 seconds mark.

======================================================
## gameJSON[[15]] --> VESPENE CURRENT
======================================================
- List of two. Each entry one of the players.
- x <- gameJSON[["VespeneCurrent"]][[1/2]]
- Returns an array. Max elements = Game Time In seconds/10+1
- 3d element => (3-1)*10 = 20 seconds.
      - Number of vespene at 20 seconds mark.

======================================================
## gameJSON[[17]] --> VESPENE COLLECTION RATE
======================================================
- List of two. Each entry one of the players.
- x <- gameJSON[["VespeneCollectionRate"]][[1/2]]
- Returns an array. Max elements = Game Time In seconds/10+1
- 3d element => (3-1)*10 = 20 seconds.
      - Number of vespene collection rate at 20 seconds mark.

======================================================
## gameJSON[[16]] --> NUM BASES
======================================================
- Information about the bases thrown by each player
- x <- gameJSON[["num_bases""]]
  x <- x[[1]][[1]] -> gives you the ID of the player
  x <- x[[1]][[2]] -> matrix of bases information. 3 columns
       1) Frame base finished.
       2) Frame base destroyed.
       3) Frame base planted

======================================================
## gameJSON[[19]] --> SUPPLY USAGE
======================================================
- List of two. Each entry one of the players.
- x <- gameJSON[["SupplyUsage"]][[1/2]]
- Returns a MATRIX. Max rows = Game Time In seconds/10+1
- Each row has two values
       1) Total supply being used
       2) Maximum supply available




===========================================================================================
GENERAL DOUBTS TO ASK TO THE GUY WHO DID THE API
===========================================================================================
- How to translate from frame to ingame time?Â¿ TT
  1) I tried dividing hatchery completed in seconds / frames at the moment, 
     but glory hell, number changes from game to game
  2) Is there a standard number to be used here?

- Whats the scouting number?
  x <- gameJSON[["scouting"]][[1/2]] returns the scouting value for each player

- Whats each value of engagements? How to read?
  x <- gameJSON[["engagements"]] returns matrix ready to view

- Aggressions. How to read them?
  x <- gameJSON[["aggrsesions"]][[1/2]] returns matrix ready to print

- macro, tmacro ?Â¿?Â¿??Â¿?Â¿?Â¿?Â¿?Â¿?

- locationdiffs?¿?¿

- deathlocations?¿?¿ I guess that coordinates where units died / were killed. Really don't understand the format



- It will be so nice to have frames of buildings complete?Â¿


==================================
Json beautifier
==================================
http://codebeautify.org/jsonviewer


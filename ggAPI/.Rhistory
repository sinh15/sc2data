## FORMAT: Cast to normal DF      ##
## ============================== ##
castNormalDF <- function(dd) {
col <- dim(dd)[2]
row <- dim(dd)[1]
dataFrame <- data.frame(matrix(ncol = col, nrow = row))
names(dataFrame) <- names(dd)
for(i in c(1:col)) {
dataFrame[, i] <- dd[[i]]
}
dataFrame[13:14] <- gsub("TRUE", "T", dataFrame[13:14])
dataFrame
}
## ============================== ##
## GET: Simple DF Spreadsheet     ##
## ============================== ##
getSimpleDF <- function() {
ssURL <- "https://docs.google.com/spreadsheets/d/1kvE8NW4cPP2zZH2IO0VTmzYDR1-fI3uQyqIHMcicB4A/edit#gid=0"
ss <- gs_url(ssURL, lookup = NULL, visibility = NULL, verbose = TRUE)
ss
}
## ============================== ##
## READ: Full Data Frame from SS  ##
## ============================== ##
readDataFrameSS <- function () {
## get spreadsheet
ss <- getSimpleDF()
## read full contents and transform
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
data <- factorColumnsSimpleDF(data)
data <- castNormalDF(data)
#return
data
}
## ============================== ##
## PRINT: Full Data Frame to SS   ##
## ============================== ##
sendDataFrameSS <- function (dd) {
## getSheet
ss <- getSimpleDF()
### create empty array to clean sheet data
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
x <- matrix("", nrow = dim(data)[1]+1, ncol = dim(data)[2])
gs_edit_cells(ss, "simpleDF_1", input = x, anchor = "A1")
## send new data to sheet
gs_edit_cells(ss, "simpleDF_1", input = dd, anchor = "A1")
}
## ============================== ##
## GET/PRINT: Non saved games     ##
## ============================== ##
synchronizeSimpleDF <- function(dd, action) {
## getSheet
ss <- getSimpleDF()
### get "saved" games
data <- gs_read(ss, "simpleDF_1", range = cell_cols(1))
## Compute differences
if(action == "upload") {
missingGames <- match(dd[, 1], data[[1]])
uploadGames(dd, missingGames, ss)
}
else if(action == "download") {
missingGames <- match(data[[1]], dd[, 1])
dd <- downloadGames(dd, missingGames, ss)
dd
}
}
## ============================== ##
## DOWNLOAD GAMES                 ##
## ============================== ##
downloadGames <- function(dd, missingGames, ss) {
## read full contents and transform
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
data <- factorColumnsSimpleDF(data)
data <- castNormalDF(data)
missing <- which(is.na(missingGames))
if(length(missing) != 0) {
for(i in c(1:length(missing))) {
dd <- rbind(dd, data[missing[i], ])
}
}
dd
}
## ============================== ##
## UPLOAD GAMES                   ##
## ============================== ##
uploadGames <- function(dd, missingGames, ss) {
## upload games that are missing
missing <- which(is.na(missingGames))
for(i in c(1:length(missing))) {
dd[, "p1_race"] <- as.character(dd[, "p1_race"])
gs_add_row(ss, "simpleDF_1", input = dd[missing[i], ])
}
}
## SIMPLE DF: Adding Row          ##
## ============================== ##
addGameSimpleDF <- function (dd, gameJSON) {
### get data and create row
entities <- gameJSON[["entities"]]
gameDATA <-
list(
gameJSON[["id"]],
gameJSON[["ended_at"]],
gameJSON[["category"]],
gameJSON[["game_type"]],
gameJSON[["duration_seconds"]],
round(gameJSON[["duration_seconds"]]/60, 2),
gameJSON[["map"]][["id"]],
gameJSON[["map"]][["name"]],
gameJSON[["replays"]][, 1],
gameJSON[["replays"]][, 2],
gameJSON[["replays"]][, 3],
computeMatchup(entities[, "race"][1], entities[, "race"][2]),
entities[, "race"][1],
entities[, "race"][2],
entities[, "win"][1],
entities[, "win"][2],
entities[, "identity"][, "id"][1],
entities[, "identity"][, "id"][2],
entities[, "identity"][, "bnet_id"][1],
entities[, "identity"][, "bnet_id"][2],
entities[, "identity"][, "name"][1],
entities[, "identity"][, "name"][2],
entities[, "identity"][, "gateway"][1],
entities[, "identity"][, "gateway"][2],
entities[, "identity"][, "current_league_1v1"][1],
entities[, "identity"][, "current_league_1v1"][2]
)
### add row and return
df <- rbind.data.frame(dd, gameDATA)
x <- nrow(df)
names(df) <-
c("gameID", "gameDate", "gameCategory", "gameType", "gameDuration", "gameDurationM", "gameMapID",
"gameMapName", "replayID", "replayHash", "replayURL", "matchup", "p1_race", "p2_race", "p1_win", "p2_win",
"p1_ID", "p2_ID", "p1_bnetID", "p2_bnetID", "p1_name", "p2_name", "p1_region", "p2_region", "p1_league", "p2_league")
## return df
df
}
## ============================== ##
## CRAETE MATCHUP                 ##
## ============================== ##
computeMatchup <- function(race1, race2) {
if(race1 <= race2) matchup = paste0(race1, "v", race2)
else matchup = paste0(race2, "v", race1)
return(matchup)
}
data <- factorColumnsSimpleDF(data)
## ============================== ##
## FORMAT: Factoring Columns      ##
## ============================== ##
factorColumnsSimpleDF <- function(dd) {
dd[[2]] <- as.Date(dd[[2]])
dd[[3]] <- as.factor(dd[[3]])
dd[[4]] <- as.factor(dd[[4]])
dd[[8]] <- as.factor(dd[[8]])
dd[[10]] <- as.factor(dd[[10]])
dd[[11]] <- as.factor(dd[[11]])
dd[[12]] <- as.factor(dd[[12]])
dd[[13]] <- gsub("TRUE", "T", dd[[13]])
dd[[14]] <- gsub("TRUE", "T", dd[[14]])
dd[[13]] <- as.factor(dd[[13]])
dd[[14]] <- as.factor(dd[[14]])
dd[[21]] <- as.factor(dd[[21]])
dd[[22]] <- as.factor(dd[[22]])
dd[[23]] <- as.factor(dd[[23]])
dd[[24]] <- as.factor(dd[[24]])
dd
}
## ============================== ##
## FORMAT: Cast to normal DF      ##
## ============================== ##
castNormalDF <- function(dd) {
col <- dim(dd)[2]
row <- dim(dd)[1]
dataFrame <- data.frame(matrix(ncol = col, nrow = row))
names(dataFrame) <- names(dd)
for(i in c(1:col)) {
dataFrame[, i] <- dd[[i]]
}
dataFrame
}
## ============================== ##
## GET: Simple DF Spreadsheet     ##
## ============================== ##
getSimpleDF <- function() {
ssURL <- "https://docs.google.com/spreadsheets/d/1kvE8NW4cPP2zZH2IO0VTmzYDR1-fI3uQyqIHMcicB4A/edit#gid=0"
ss <- gs_url(ssURL, lookup = NULL, visibility = NULL, verbose = TRUE)
ss
}
## ============================== ##
## READ: Full Data Frame from SS  ##
## ============================== ##
readSimpleDataFrameSS <- function () {
## get spreadsheet
ss <- getSimpleDF()
## read full contents and transform
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
data <- factorColumnsSimpleDF(data)
data <- castNormalDF(data)
#return
data
}
## ============================== ##
## PRINT: Full Data Frame to SS   ##
## ============================== ##
writeSimpleDataFrameSS <- function (dd) {
## getSheet
ss <- getSimpleDF()
### create empty array to clean sheet data
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
x <- matrix("", nrow = dim(data)[1]+1, ncol = dim(data)[2])
gs_edit_cells(ss, "simpleDF_1", input = x, anchor = "A1")
## send new data to sheet
gs_edit_cells(ss, "simpleDF_1", input = dd, anchor = "A1")
}
## ============================== ##
## GET/PRINT: Non saved games     ##
## ============================== ##
synchronizeSimpleDF <- function(dd, action) {
## getSheet
ss <- getSimpleDF()
### get "saved" games
data <- gs_read(ss, "simpleDF_1", range = cell_cols(1))
## Compute differences
if(action == "upload") {
missingGames <- match(dd[, 1], data[[1]])
uploadGames(dd, missingGames, ss)
}
else if(action == "download") {
missingGames <- match(data[[1]], dd[, 1])
dd <- downloadGames(dd, missingGames, ss)
dd
}
}
## ============================== ##
## DOWNLOAD GAMES                 ##
## ============================== ##
downloadGames <- function(dd, missingGames, ss) {
## read full contents and transform
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
data <- factorColumnsSimpleDF(data)
data <- castNormalDF(data)
missing <- which(is.na(missingGames))
if(length(missing) != 0) {
for(i in c(1:length(missing))) {
dd <- rbind(dd, data[missing[i], ])
}
}
dd
}
## ============================== ##
## UPLOAD GAMES                   ##
## ============================== ##
uploadGames <- function(dd, missingGames, ss) {
## upload games that are missing
missing <- which(is.na(missingGames))
for(i in c(1:length(missing))) {
dd[, "p1_race"] <- as.character(dd[, "p1_race"])
gs_add_row(ss, "simpleDF_1", input = dd[missing[i], ])
}
}
## ============================== ##
createSimpleDF <- function() {
df <- data.frame(matrix(ncol = 26, nrow = 0))
## Return data frame
df
}
## ============================== ##
## Cast Date Simple DF            ##
## ============================== ##
castDateSimpleDF <- function(dd) {
dd[, 2] <- as.Date(dd[, 2])
## return data frame
dd
}
## ============================== ##
## SIMPLE DF: Adding Row          ##
## ============================== ##
addGameSimpleDF <- function (dd, gameJSON) {
### get data and create row
entities <- gameJSON[["entities"]]
gameDATA <-
list(
gameJSON[["id"]],
gameJSON[["ended_at"]],
gameJSON[["category"]],
gameJSON[["game_type"]],
gameJSON[["duration_seconds"]],
round(gameJSON[["duration_seconds"]]/60, 2),
gameJSON[["map"]][["id"]],
gameJSON[["map"]][["name"]],
gameJSON[["replays"]][, 1],
gameJSON[["replays"]][, 2],
gameJSON[["replays"]][, 3],
computeMatchup(entities[, "race"][1], entities[, "race"][2]),
entities[, "race"][1],
entities[, "race"][2],
entities[, "win"][1],
entities[, "win"][2],
entities[, "identity"][, "id"][1],
entities[, "identity"][, "id"][2],
entities[, "identity"][, "bnet_id"][1],
entities[, "identity"][, "bnet_id"][2],
entities[, "identity"][, "name"][1],
entities[, "identity"][, "name"][2],
entities[, "identity"][, "gateway"][1],
entities[, "identity"][, "gateway"][2],
entities[, "identity"][, "current_league_1v1"][1],
entities[, "identity"][, "current_league_1v1"][2]
)
### add row and return
df <- rbind.data.frame(dd, gameDATA)
x <- nrow(df)
names(df) <-
c("gameID", "gameDate", "gameCategory", "gameType", "gameDuration", "gameDurationM", "gameMapID",
"gameMapName", "replayID", "replayHash", "replayURL", "matchup", "p1_race", "p2_race", "p1_win", "p2_win",
"p1_ID", "p2_ID", "p1_bnetID", "p2_bnetID", "p1_name", "p2_name", "p1_region", "p2_region", "p1_league", "p2_league")
## return df
df
}
## ============================== ##
## CRAETE MATCHUP                 ##
## ============================== ##
computeMatchup <- function(race1, race2) {
if(race1 <= race2) matchup = paste0(race1, "v", race2)
else matchup = paste0(race2, "v", race1)
return(matchup)
}
dd <- createSimpleDF()
dd <- readSimpleDataFrameSS()
View(dd)
lapply(dd, class)
View(lapply(dd, class))
writeSimpleDataFrameSS(dd)
ss <- getSimpleDF()
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
View(data)
length(data)
writeSimpleDataFrameSS <- function (dd) {
## getSheet
ss <- getSimpleDF()
### create empty array to clean sheet data
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
if(length(data) != 0) {
x <- matrix("", nrow = dim(data)[1]+1, ncol = dim(data)[2])
gs_edit_cells(ss, "simpleDF_1", input = x, anchor = "A1")
}
## send new data to sheet
gs_edit_cells(ss, "simpleDF_1", input = dd, anchor = "A1")
}
writeSimpleDataFrameSS(dd)
dd[1, 1] <- 1000
dd[4, 1] <- 2000
synchronizeSimpleDF(dd, "upload")
dd <- synchronizeSimpleDF(dd, "download")
View(dd)
class(dd[, "gameID"])
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
missingGames <- match(data[[1]], dd[, 1])
missingGames
missing <- which(is.na(missingGames))
missing
data <- data[missing, ]
View(data)
View(dd)
class(dd[, 2])
gameJSON <- "http://api.ggtracker.com/api/v1/matches/6306072.json"
gameJSON <- fromJSON(gameJSON)
dd <- addGameSimpleDF(dd, gameJSON)
View(dd)
class(dd, 2)
class(dd[, 2]
)
class(dd[12, 2])
library(googlesheets)
library(jsonlite)
library(dplyr)
setwd("~/GitHub/sc2data/ggAPI")
if(!require(googlesheets)) install.packages("googlesheets")
if(!require(jsonlite)) install.packages("jsonlite")
if(!require(dplyr)) install.packages("dplyr")
if(!require(ggplot2)) install.packages("ggplot2")
load("~/GitHub/sc2data/ggAPI/.RData")
rm(X)
rm(x)
x <- dd[5, 1]
x
class(x)
if(x %in% dd$gameID)
x %in% dd$gameID
1231 %in% dd$gameID
processAdvancedDF <- function(id, upload) {
## CHECK containers exist
if(!exists("dd")) stop("Please Create Simple Data Frame")
else if(!exists("df")) stop("Please Create Advanced Data Frame")
if(id %in% dd$gameID) {
## ADD: Game to advanced df
adJSON <- paste0("https://gg2-matchblobs-prod.s3.amazonaws.com/", id)
adJSON <- fromJSON(adJSON)
gameAdvanced <- extractAdvancedGameDetails(adJSON, id, gameSimple, upload)
df <<- rbind(df, gameAdvanced)
} else {
stop("The game is not to be found on the simpleDD. Please use the function processGame(id, upload) instead")
}
}
processAdvancedFromID <- function(id, upload) {
## CHECK containers exist
if(!exists("dd")) stop("Please Create Simple Data Frame")
else if(!exists("df")) stop("Please Create Advanced Data Frame")
if(id %in% dd$gameID) {
## ADD: Game to advanced df
adJSON <- paste0("https://gg2-matchblobs-prod.s3.amazonaws.com/", id)
adJSON <- fromJSON(adJSON)
gameAdvanced <- extractAdvancedGameDetails(adJSON, id, gameSimple, upload)
df <<- rbind(df, gameAdvanced)
} else {
stop("The game is not to be found on the simpleDD. Please use the function processGame(id, upload) instead")
}
}
x <- dd[5, 1]
!id %in% dd$gameID
!x %in% dd$gameID
x <- dd$gameID
class(x)
View(x)
x[1]
x[2]
x <- as.array(dd$gameID)
View(x)
class(x)
x <- dd[5, 1]
x <- df[df$gameID == x, ]
class(x)
x <- dd[5, 1]
x <- dd[dd$gameID == x, ]
class(x)
View(x)
processAdvancedFromDD <- function(upload) {
## CHECK containers exist
if(!exists("dd")) stop("Please Create Simple Data Frame")
else if(!exists("df")) stop("Please Create Advanced Data Frame")
## GET games on simple DD
x <- as.array(dd$gameID)
for(i in c(1:length(x))) {
## REMOVE: rests of the game from advancedDF
df <<- filter(df, gameID != x[i])
## ADD: Game to advanced df
adJSON <- paste0("https://gg2-matchblobs-prod.s3.amazonaws.com/", x[i])
adJSON <- fromJSON(adJSON)
gameAdvanced <- extractAdvancedGameDetails(adJSON, x[i], dd[dd$gameID == x[i], ], upload)
df <<- rbind(df, gameAdvanced)
}
}
processSimpleFromID <- function(id) {
## CHECK containers exist
if(!exists("dd")) stop("Please Create Simple Data Frame")
## ADD: Game to simple dd
if(!id %in% dd$gameID) {
gameJSON <- paste0("http://api.ggtracker.com/api/v1/matches/", id, ".json")
gameJSON <- fromJSON(gameJSON)
gameSimple <- extractSimpleGameDetails(gameJSON)
dd <<- rbind(dd, gameSimple)
} else {
stop("The game is already on the simpleDD")
}
}
createGlobal <- function() {
y <<- 1
}
createGlobal()
y
rm(y)
rm(x)
rm(basesInfo)
rm(castNormalDF)
rm(computeArmy)
rm(computeMatchup)
rmcomputeUpgrades
rm(computeUpgrades)
rm(createAdvancedDF)
rm(createGlobal)
rm(createSimpleDF)
rm(createUpgradesAndArmy)
rm(donwloadGames)
rm(downloadGames)
rm(extractAdvancedGameDetails())
rm(extractAdvancedGameDetails
)
rm(extractMaxs10SecondsBlocks)
rm(extractSimpleGameDetails)
rm(factorColumnsSimpleDF)
rm(getSimpleF)
rm(getSimpleDF)
rm(processAdvancedFromDD)
rm(processAdvancedDF)
rm(processAdvancedFromID)
rm(processGame)
rm(processSimpleFromID)
rm(readGamesGGTracker)
rm(readSimpleDataFrameSS)
rm(readUnitsLists)
rm(readUpgradeslist)
rm(readUpgradesList)
rm(supplyUsage)
rm(synchronizeSimpleDF)
rm(uploadGames)
rm(writeSimpleDataFrameSS)
gc()
source('spreadsheetsConnection.R')
source('builderSimpleDF.R')
source('builderAdvancedDF.R')
source('upgradesAndArmy.R')
source('processGames.R')

allDD <- flatten(allDD)
View(allDD)
names(allDD)
allDD[, 11:13] <- as.data.frame(allDD[, 11:13])
allDD <- flatten(allDD)
View(allDD)
allDD <- rbind(df1, df2)
allDD[, 11:13] <- as.data.frame(allDD[, 11:13])
class(allDD[, 11])
allDD[, 13] <- as.data.frame(allDD[, 13])
allDD[, 12] <- as.data.frame(allDD[, 12])
x <- allDD[, 13]
x <- as.data.frame(x)
View(x)
names(x)
allDD <- rbind(df1, df2)
x <- as.data.frame(allDD[, 11])
names(x)
View(x)
x <- as.data.frame(allDD[, 12])
names(x)
x <- as.data.frame(allDD[, 13])
names(x)
View(x)
x <- as.data.frame(allDD[, 13])
names(allDD)
units <- computeArmy(adJSON, int, 6, races, gameDuration)
df1$units <- units[[p1]]
df2$units <- units[[p2]]
units <- computeArmy(adJSON, int, 6, races, gameDuration)
computeArmy <- function(adJSON, int, columnIndex, races, gameDuration) {
## Army Info
armyInfo <- list()
## Read race units & compute variables
if(!exists("unitsList")) unitsList <- readUnitsLists()
len <- max(int)+1
tUnits <- sum(length(unitsList[[1]][, 1])+length(unitsList[[2]][, 1])+length(unitsList[[3]][, 1]))
zergNames <- sort(c(unitsList[[1]][, 1], paste0(unitsList[[1]][, 1], "D")))
terranNames <- sort(c(unitsList[[2]][, 1], paste0(unitsList[[2]][, 1], "D")))
protossNames <- sort(c(unitsList[[3]][, 1], paste0(unitsList[[3]][, 1], "D")))
zLength <- length(zergNames)
tLength <- length(terranNames)
pLength <- length(protossNames)
for(i in c(1:length(adJSON[[columnIndex]]))) {
## prepare environment
xi <- adJSON[[columnIndex]][[i]]
pUnits <- matrix(data = rep(NA, len*tUnits*2), ncol = (tUnits*2), nrow = len)
colnames(pUnits) <- c(zergNames, terranNames, protossNames)
## craetes 0s depending on race
if(races[i] == "Z") {
pUnits[, 1:zLength] <- 0
} else if(races[i] == "T") {
pUnits[, (zLength+1):(zLength+tLength)] <- 0
} else {
pUnits[, (zLength+tLength+1):(zLength+tLength+pLength)] <- 0
}
## Compute CRAETED & DEFEATED by GAME INTERVAL
for(j in c(1:dim(xi)[1])) {
## add unit craeted to proper row
uColumn <- which(colnames(pUnits) == xi[j, 1])
uRow <- floor(as.numeric(xi[j, 2])/(16*30)+1)
pUnits[uRow, uColumn] <- pUnits[uRow, uColumn]+1
## add unit destroyed to column if required
if(as.numeric(xi[j, 3]) <= gameDuration) {
uRow <- floor(as.numeric(xi[j, 3])/(16*30)+1)
pUnits[uRow, (uColumn+1)] <- pUnits[uRow, (uColumn+1)]+1
}
}
## Compute ARMY TOTALS by INTERVAL (crated & destroyed)
for(j in c(2:len)) {
pUnits[j, ] <- pUnits[j, ] + pUnits[(j-1), ]
}
## Add to List
if(i == 1) armyInfo$p1 <- pUnits
else armyInfo$p2 <- pUnits
}
## Return armyInfo
armyInfo
}
units <- computeArmy(adJSON, int, 6, races, gameDuration)
df1$units <- units[[p1]]
df2$units <- units[[p2]]
names(df1)
allDD <- rbind(df1, df2)
names(allDD)
View(df1)
x <- alDD[, 12]
x <- allDD[, 12]
names(x)
x <- as.data.frame(x)
names(x)
names(allDD)
allDD[, 11:13] <- as.data.frame(allDD[,11:13])
class(allDD[, 11])
class(allDD[, 12])
allDD[, 11] <- as.data.frame(allDD[, 11])
allDD <- flatten(as.data.frame(allDD[, ]))
View(allDD)
## FLATTEN DFs
df1 <- flatten(df1)
df2 <- flatten(df2)
View(df1)
## PREPARE INTERVALS
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
## STORAGE DATA FRAMES
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
## COL(1): Id of the player
pID_1 <- dd[dd$gameID == 6336526, "p1_ID"]
pID_2 <- dd[dd$gameID == 6336526, "p2_ID"]
df1[, 1] <- dd[dd$gameID == 6336526, "p1_ID"]
df2[, 1] <- dd[dd$gameID == 6336526, "p2_ID"]
names(df1)[1] <- "game"
names(df2)[1] <- "game"
## COL(2): Name of the player
df1$name <- dd[dd$gameID == 6336526, "p1_name"]
df2$name <- dd[dd$gameID == 6336526, "p2_name"]
## COL(3): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2$minutes <- df1[, 3]
## COL(4): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1$lost <- resourcesLost[[p1]]
df2$lost <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1$workers <- activeWorkers[[p1]]
df2$workers <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1$minerals <- currentMinerals[[p1]]
df2$minerals <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1$minerals_cr <- mineralsCollectionRate[[p1]]
df2$minerals_cr <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(10): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(11): Player Bases
gameDuration <- dd[dd$gameID == 6336526, "gameDuration"]*16
bInfo <- basesInfo(adJSON, int, 16, gameDuration)
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
## COL(12): Upgrades
if(p1 == 1) {
races <- c(as.character(dd[dd$gameID == 6336526, "p1_race"]), as.character(dd[dd$gameID == 6336526, "p2_race"]))
} else races <- c(as.character(dd[dd$gameID == 6336526, "p2_race"]), as.character(dd[dd$gameID == 6336526, "p1_race"]))
upgradesInfo <- computeUpgrades(adJSON, int, 8, races)
df1$upgrades <- upgradesInfo[[p1]]
df2$upgrades <- upgradesInfo[[p2]]
## COL(13): Army info
units <- computeArmy(adJSON, int, 6, races, gameDuration)
df1$units <- as.data.frame(units[[p1]])
df2$units <- as.data.frame(units[[p2]])
View(df1)
allDD <- rbind(df1, df2)
## FLATTEN DFs
df1 <- flatten(df1)
df2 <- flatten(df2)
allDD <- rbind(df1, df2)
View(allDD)
object.size(allDD)
500*0.129122
2000*0129122
2000*0.129122
gc()
names(allDD)
computeArmy <- function(adJSON, int, columnIndex, races, gameDuration) {
## Army Info
armyInfo <- list()
## Read race units & compute variables
if(!exists("unitsList")) unitsList <- readUnitsLists()
len <- max(int)+1
tUnits <- sum(length(unitsList[[1]][, 1])+length(unitsList[[2]][, 1])+length(unitsList[[3]][, 1]))
zergNames <- sort(c(unitsList[[1]][, 1], paste0(unitsList[[1]][, 1], "D")))
terranNames <- sort(c(unitsList[[2]][, 1], paste0(unitsList[[2]][, 1], "D")))
protossNames <- sort(c(unitsList[[3]][, 1], paste0(unitsList[[3]][, 1], "D")))
zLength <- length(zergNames)
tLength <- length(terranNames)
pLength <- length(protossNames)
for(i in c(1:length(adJSON[[columnIndex]]))) {
## prepare environment
xi <- adJSON[[columnIndex]][[i]]
pUnits <- as.data.frame(matrix(data = rep(NA, len*tUnits*2), ncol = (tUnits*2), nrow = len))
colnames(pUnits) <- c(zergNames, terranNames, protossNames)
## craetes 0s depending on race
if(races[i] == "Z") {
pUnits[, 1:zLength] <- 0
} else if(races[i] == "T") {
pUnits[, (zLength+1):(zLength+tLength)] <- 0
} else {
pUnits[, (zLength+tLength+1):(zLength+tLength+pLength)] <- 0
}
## Compute CRAETED & DEFEATED by GAME INTERVAL
for(j in c(1:dim(xi)[1])) {
## add unit craeted to proper row
uColumn <- which(colnames(pUnits) == xi[j, 1])
uRow <- floor(as.numeric(xi[j, 2])/(16*30)+1)
pUnits[uRow, uColumn] <- pUnits[uRow, uColumn]+1
## add unit destroyed to column if required
if(as.numeric(xi[j, 3]) <= gameDuration) {
uRow <- floor(as.numeric(xi[j, 3])/(16*30)+1)
pUnits[uRow, (uColumn+1)] <- pUnits[uRow, (uColumn+1)]+1
}
}
## Compute ARMY TOTALS by INTERVAL (crated & destroyed)
for(j in c(2:len)) {
pUnits[j, ] <- pUnits[j, ] + pUnits[(j-1), ]
}
## Add to List
if(i == 1) armyInfo$p1 <- pUnits
else armyInfo$p2 <- pUnits
}
## Return armyInfo
armyInfo
}
## ======================================= ##
## FUCTIONS TO CREATE UPGRADE & ARMY LISTs ##
## ======================================= ##
#ALL UPGRADES & UNITS => Zerg/terran/protoss
createUpgradesAndArmy <- function() {
## READ UPGRADES
zergJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345542"
terranJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345614"
protossJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345638"
zergJSON <- fromJSON(zergJSON)
terranJSON <- fromJSON(terranJSON)
protossJSON <- fromJSON(protossJSON)
### UPGRADES by RACE, SORT and CRAETE FILE
zergUpgrades <-  as.data.frame(sort(zergJSON[[8]][[1]][, 1]))
names(zergUpgrades) <- "zergUpgrades"
write.csv(zergUnits, file = "configFiles/zergUpgrades", row.names = FALSE)
terranUpgrades <- as.data.frame(sort(terranJSON[[8]][[1]][, 1]))
names(terranUpgrades) <- "terranUpgrades"
write.csv(zergUnits, file = "configFiles/terranUpgrades", row.names = FALSE)
protossUpgrades <- as.data.frame(sort(protossJSON[[8]][[1]][, 1]))
names(protossUpgrades) <- "protossUpgrades"
write.csv(zergUnits, file = "configFiles/protossUpgrades", row.names = FALSE)
### UNITS by RACE, SORT and CRAETE FILE
zergArmy <- zergJSON[[6]][[1]]
zergUnits <- as.data.frame(sort(unique(zergArmy[, 1])))
names(zergUnits) <- "zergUnits"
write.csv(zergUnits, file = "configFiles/zergUnits.csv", row.names = FALSE)
terranArmy <- terranJSON[[6]][[1]]
terranUnits <- as.data.frame(sort(unique(terranArmy[, 1])))
names(terranUnits) <- "terranUnits"
write.csv(terranUnits, file = "configFiles/terranUnits.csv", row.names = FALSE)
protossArmy <- protossJSON[[6]][[1]]
protossUnits <- as.data.frame(sort(unique(protossArmy[, 1])))
names(protossUnits) <- "protossUnits"
write.csv(protossUnits, file = "configFiles/protossUnits.csv", row.names = FALSE)
}
readUpgradesList <- function() {
zergUpgrades <- read.csv("configFiles/zergUpgrades.csv", stringsAsFactors = FALSE)
terranUpgrades <- read.csv("configFiles/terranUpgrades.csv", stringsAsFactors = FALSE)
protossUpgrades <- read.csv("configFiles/protossUpgardes.csv", stringsAsFactors = FALSE)
list(zergUpgrades, terranUpgrades, protossUpgrades)
}
readUnitsLists <- function() {
zergUnits <- read.csv("configFiles/zergUnits.csv", stringsAsFactors = FALSE)
terranUnits <- read.csv("configFiles/terranUnits.csv", stringsAsFactors = FALSE)
protossUnits <- read.csv("configFiles/protossUnits.csv", stringsAsFactors = FALSE)
list(zergUnits, terranUnits, protossUnits)
}
rm(upgrades)
if(!exists("upgrades")) upgrades <- readUpgradesList()
## READ UPGRADES
zergJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345542"
terranJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345614"
protossJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345638"
zergJSON <- fromJSON(zergJSON)
terranJSON <- fromJSON(terranJSON)
protossJSON <- fromJSON(protossJSON)
### UPGRADES by RACE, SORT and CRAETE FILE
zergUpgrades <-  as.data.frame(sort(zergJSON[[8]][[1]][, 1]))
names(zergUpgrades) <- "zergUpgrades"
write.csv(zergUnits, file = "configFiles/zergUpgrades.csv", row.names = FALSE)
terranUpgrades <- as.data.frame(sort(terranJSON[[8]][[1]][, 1]))
names(terranUpgrades) <- "terranUpgrades"
write.csv(zergUnits, file = "configFiles/terranUpgrades.csv", row.names = FALSE)
protossUpgrades <- as.data.frame(sort(protossJSON[[8]][[1]][, 1]))
names(protossUpgrades) <- "protossUpgrades"
write.csv(zergUnits, file = "configFiles/protossUpgrades.csv", row.names = FALSE)
createUpgradesAndArmy <- function() {
## READ UPGRADES
zergJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345542"
terranJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345614"
protossJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345638"
zergJSON <- fromJSON(zergJSON)
terranJSON <- fromJSON(terranJSON)
protossJSON <- fromJSON(protossJSON)
### UPGRADES by RACE, SORT and CRAETE FILE
zergUpgrades <-  as.data.frame(sort(zergJSON[[8]][[1]][, 1]))
names(zergUpgrades) <- "zergUpgrades"
write.csv(zergUpgrades, file = "configFiles/zergUpgrades.csv", row.names = FALSE)
terranUpgrades <- as.data.frame(sort(terranJSON[[8]][[1]][, 1]))
names(terranUpgrades) <- "terranUpgrades"
write.csv(terranUpgrades, file = "configFiles/terranUpgrades.csv", row.names = FALSE)
protossUpgrades <- as.data.frame(sort(protossJSON[[8]][[1]][, 1]))
names(protossUpgrades) <- "protossUpgrades"
write.csv(protossUpgrades, file = "configFiles/protossUpgrades.csv", row.names = FALSE)
### UNITS by RACE, SORT and CRAETE FILE
zergArmy <- zergJSON[[6]][[1]]
zergUnits <- as.data.frame(sort(unique(zergArmy[, 1])))
names(zergUnits) <- "zergUnits"
write.csv(zergUnits, file = "configFiles/zergUnits.csv", row.names = FALSE)
terranArmy <- terranJSON[[6]][[1]]
terranUnits <- as.data.frame(sort(unique(terranArmy[, 1])))
names(terranUnits) <- "terranUnits"
write.csv(terranUnits, file = "configFiles/terranUnits.csv", row.names = FALSE)
protossArmy <- protossJSON[[6]][[1]]
protossUnits <- as.data.frame(sort(unique(protossArmy[, 1])))
names(protossUnits) <- "protossUnits"
write.csv(protossUnits, file = "configFiles/protossUnits.csv", row.names = FALSE)
}
### UPGRADES by RACE, SORT and CRAETE FILE
zergUpgrades <-  as.data.frame(sort(zergJSON[[8]][[1]][, 1]))
names(zergUpgrades) <- "zergUpgrades"
write.csv(zergUpgrades, file = "configFiles/zergUpgrades.csv", row.names = FALSE)
terranUpgrades <- as.data.frame(sort(terranJSON[[8]][[1]][, 1]))
names(terranUpgrades) <- "terranUpgrades"
write.csv(terranUpgrades, file = "configFiles/terranUpgrades.csv", row.names = FALSE)
protossUpgrades <- as.data.frame(sort(protossJSON[[8]][[1]][, 1]))
names(protossUpgrades) <- "protossUpgrades"
write.csv(protossUpgrades, file = "configFiles/protossUpgrades.csv", row.names = FALSE)
if(!exists("upgrades")) upgrades <- readUpgradesList()
readUpgradesList <- function() {
zergUpgrades <- read.csv("configFiles/zergUpgrades.csv", stringsAsFactors = FALSE)
terranUpgrades <- read.csv("configFiles/terranUpgrades.csv", stringsAsFactors = FALSE)
protossUpgrades <- read.csv("configFiles/protossUpgrades.csv", stringsAsFactors = FALSE)
list(zergUpgrades, terranUpgrades, protossUpgrades)
}
if(!exists("upgrades")) upgrades <- readUpgradesList()
upgrades[[1]]
length(upgrades[[1]])
zergUpgrades <- upgrades[[1]][, 1]
zergUpgrades
terranUpgrades <- upgrades[[2]][, 1]
terranUpgrades
protossUpgrades <- upgrades[[3]][, 1]
protossUpgrades
tLength <- zLength + tLength + pLength
zergUpgrades <- upgrades[[1]][, 1]
terranUpgrades <- upgrades[[2]][, 1]
protossUpgrades <- upgrades[[3]][, 1]
zLength <- length(zergUpgrades)
tLength <- length(terranUpgrades)
pLength <- length(protossUpgrades)
tLength <- zLength + tLength + pLength
tLength
## ============================== ##
## COMPUTE UPGRADES               ##
## ============================== ##
computeUpgrades <- function(adJSON, int, columnIndex, races) {
#upgradesInfo: P1 & P2 dataframes
upgradesInfo <- list()
# check varaibles are avaiable
if(!exists("upgrades")) upgrades <- readUpgradesList()
len <- max(int)+1
zergUpgrades <- upgrades[[1]][, 1]
terranUpgrades <- upgrades[[2]][, 1]
protossUpgrades <- upgrades[[3]][, 1]
zLength <- length(zergUpgrades)
tLength <- length(terranUpgrades)
pLength <- length(protossUpgrades)
tLength <- zLength + tLength + pLength
# numUpgrades -> zerg / terran / protoss
numUpgrades <- c(26, 33, 25)
# compute upgrades
for(i in c(1:length(adJSON[[columnIndex]]))) {
## prepare environment
xi <- adJSON[[columnIndex]][[i]]
pUpgrades <- as.data.frame(matrix(data = rep(NA, len*tLength), ncol = tLength, nrow = len))
names(pUpgrades) <- c(zergUpgrades, terranUpgrades, protossUpgrades)
## Create 0s depending on RACE
if(races[i] == "Z") {
pUpgrades[, 1:zLength] <- 0
} else if(races[i] == "T") {
pUpgrades[, (zLength+1):(zLength+tLength)] <- 0
} else {
pUpgrades[, (zLength+tLength+1):(zLength+tLength+pLength)] <- 0
}
## add upgrades
for(j in c(1:dim(xi)[1])) {
pUpgrades[floor(as.numeric(xi[j, 2])/(16*30)+1), xi[j, 1]] <- 1
}
## add uplayer upgrades to list
if(i == 1) upgradesInfo$p1 <- pUpgrades
else upgradesInfo$p2 <- pUpgrades
}
upgradesInfo
}
upgradesInfo <- computeUpgrades(adJSON, int, 8, races)
df1$upgrades <- upgradesInfo[[p1]]
df2$upgrades <- upgradesInfo[[p2]]
View(df1$upgrades)
View(df2$upgrades)
computeUpgrades <- function(adJSON, int, columnIndex, races) {
#upgradesInfo: P1 & P2 dataframes
upgradesInfo <- list()
# check varaibles are avaiable
if(!exists("upgrades")) upgrades <- readUpgradesList()
len <- max(int)+1
zergUpgrades <- upgrades[[1]][, 1]
terranUpgrades <- upgrades[[2]][, 1]
protossUpgrades <- upgrades[[3]][, 1]
zLength <- length(zergUpgrades)
tLength <- length(terranUpgrades)
pLength <- length(protossUpgrades)
tLength <- zLength + tLength + pLength
# compute upgrades
for(i in c(1:length(adJSON[[columnIndex]]))) {
## prepare environment
xi <- adJSON[[columnIndex]][[i]]
pUpgrades <- as.data.frame(matrix(data = rep(NA, len*tLength), ncol = tLength, nrow = len))
names(pUpgrades) <- c(zergUpgrades, terranUpgrades, protossUpgrades)
## Create 0s depending on RACE
if(races[i] == "Z") {
pUpgrades[, 1:zLength] <- 0
} else if(races[i] == "T") {
pUpgrades[, (zLength+1):(zLength+tLength)] <- 0
} else {
pUpgrades[, (zLength+tLength+1):(zLength+tLength+pLength)] <- 0
}
## add upgrades
for(j in c(1:dim(xi)[1])) {
pUpgrades[floor(as.numeric(xi[j, 2])/(16*30)+1), xi[j, 1]] <- 1
}
## add uplayer upgrades to list
if(i == 1) upgradesInfo$p1 <- pUpgrades
else upgradesInfo$p2 <- pUpgrades
}
upgradesInfo
}
computeArmy <- function(adJSON, int, columnIndex, races, gameDuration) {
## Army Info
armyInfo <- list()
## Read race units & compute variables
if(!exists("unitsList")) unitsList <- readUnitsLists()
len <- max(int)+1
tUnits <- sum(length(unitsList[[1]][, 1])+length(unitsList[[2]][, 1])+length(unitsList[[3]][, 1]))
zergNames <- sort(c(unitsList[[1]][, 1], paste0(unitsList[[1]][, 1], "D")))
terranNames <- sort(c(unitsList[[2]][, 1], paste0(unitsList[[2]][, 1], "D")))
protossNames <- sort(c(unitsList[[3]][, 1], paste0(unitsList[[3]][, 1], "D")))
zLength <- length(zergNames)
tLength <- length(terranNames)
pLength <- length(protossNames)
for(i in c(1:length(adJSON[[columnIndex]]))) {
## prepare environment
xi <- adJSON[[columnIndex]][[i]]
pUnits <- as.data.frame(matrix(data = rep(NA, len*tUnits*2), ncol = (tUnits*2), nrow = len))
colnames(pUnits) <- c(zergNames, terranNames, protossNames)
## craetes 0s depending on race
if(races[i] == "Z") {
pUnits[, 1:zLength] <- 0
} else if(races[i] == "T") {
pUnits[, (zLength+1):(zLength+tLength)] <- 0
} else {
pUnits[, (zLength+tLength+1):(zLength+tLength+pLength)] <- 0
}
## Compute CRAETED & DEFEATED by GAME INTERVAL
for(j in c(1:dim(xi)[1])) {
## add unit craeted to proper row
uColumn <- which(colnames(pUnits) == xi[j, 1])
uRow <- floor(as.numeric(xi[j, 2])/(16*30)+1)
pUnits[uRow, uColumn] <- pUnits[uRow, uColumn]+1
## add unit destroyed to column if required
if(as.numeric(xi[j, 3]) <= gameDuration) {
uRow <- floor(as.numeric(xi[j, 3])/(16*30)+1)
pUnits[uRow, (uColumn+1)] <- pUnits[uRow, (uColumn+1)]+1
}
}
## Compute ARMY TOTALS by INTERVAL (crated & destroyed)
for(j in c(2:len)) {
pUnits[j, ] <- pUnits[j, ] + pUnits[(j-1), ]
}
## Add to List
if(i == 1) armyInfo$p1 <- pUnits
else armyInfo$p2 <- pUnits
}
## Return armyInfo
armyInfo
}

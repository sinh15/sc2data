df1[, 1] <- dd[dd$gameID == id, "p1_ID"]
df2[, 1] <- dd[dd$gameID == id, "p2_ID"]
names(df1)[1] <- "game"
names(df2)[1] <- "game"
## COL(2): Name of the player
df1$name <- dd[dd$gameID == id, "p1_name"]
df2$name <- dd[dd$gameID == id, "p2_name"]
## COL(3): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2$minutes <- df1[, 3]
## COL(4): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1$lost <- resourcesLost[[p1]]
df2$lost <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1$workers <- activeWorkers[[p1]]
df2$workers <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1$minerals <- currentMinerals[[p1]]
df2$minerals <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1$minerals_cr <- mineralsCollectionRate[[p1]]
df2$minerals_cr <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(10): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(11): Player Bases
gameDuration <- dd[dd$gameID == id, "gameDuration"]*16
bInfo <- basesInfo(adJSON, int, 16, gameDuration)
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
## COL(12): Upgrades
if(p1 == 1) {
races <- c(as.character(dd[dd$gameID == id, "p1_race"]), as.character(dd[dd$gameID == id, "p2_race"]))
} else races <- c(as.character(dd[dd$gameID == id, "p2_race"]), as.character(dd[dd$gameID == id, "p1_race"]))
upgradesInfo <- computeUpgrades(adJSON, int, 8, races)
df1$upgrades <- upgradesInfo[[p1]]
df2$upgrades <- upgradesInfo[[p2]]
## COL(13): Army info
units <- computeArmy(adJSON, int, 6, races, gameDuration)
df1$units <- units[[p1]]
df2$units <- units[[p2]]
## FLATTEN DFs
df1 <- flatten(df1)
df2 <- flatten(df2)
## UPLOAD: Craete temps and upload ADV. info x PLAYER
temp1 <- paste0("tempFiles/", id, "_", pID_1, ".csv")
temp2 <- paste0("tempFiles/", id, "_", pID_2, ".csv")
write.csv(df1, file = temp1, row.names = FALSE)
write.csv(df2, file = temp2, row.names = FALSE)
gs_upload(temp1)
gs_upload(temp2)
## RBIND AND RETURN
allDF <- rbind(df1, df2)
allDF
}
rm(dd, df)
dd <- createSimpleDF()
df <- createAdvancedDF()
processGame(6336526)
head(names(df))
"6
processGame(6336526)
rm(dd, df)
dd <- createSimpleDF()
df <- createAdvancedDF()
extractAdvancedGameDetails <- function(adJSON, id, dd) {
## PREPARE INTERVALS
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
## STORAGE DATA FRAMES
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
## COL(1): Id of the player
pID_1 <- dd[dd$gameID == id, "p1_ID"]
pID_2 <- dd[dd$gameID == id, "p2_ID"]
df1[, 1] <- dd[dd$gameID == id, "p1_ID"]
df2[, 1] <- dd[dd$gameID == id, "p2_ID"]
names(df1)[1] <- "game"
names(df2)[1] <- "game"
## COL(2): Name of the player
df1$name <- dd[dd$gameID == id, "p1_name"]
df2$name <- dd[dd$gameID == id, "p2_name"]
## COL(3): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2$minutes <- df1[, 3]
## COL(4): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1$lost <- resourcesLost[[p1]]
df2$lost <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1$workers <- activeWorkers[[p1]]
df2$workers <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1$minerals <- currentMinerals[[p1]]
df2$minerals <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1$minerals_cr <- mineralsCollectionRate[[p1]]
df2$minerals_cr <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(10): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(11): Player Bases
gameDuration <- dd[dd$gameID == id, "gameDuration"]*16
bInfo <- basesInfo(adJSON, int, 16, gameDuration)
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
## COL(12): Upgrades
if(p1 == 1) {
races <- c(as.character(dd[dd$gameID == id, "p1_race"]), as.character(dd[dd$gameID == id, "p2_race"]))
} else races <- c(as.character(dd[dd$gameID == id, "p2_race"]), as.character(dd[dd$gameID == id, "p1_race"]))
upgradesInfo <- computeUpgrades(adJSON, int, 8, races)
df1$upgrades <- upgradesInfo[[p1]]
df2$upgrades <- upgradesInfo[[p2]]
## COL(13): Army info
units <- computeArmy(adJSON, int, 6, races, gameDuration)
df1$units <- units[[p1]]
df2$units <- units[[p2]]
## FLATTEN DFs
df1 <- flatten(df1)
df2 <- flatten(df2)
## RBIND
allDF <- rbind(df1, df2)
## UPLOAD: Craete temps and upload ADV. info x PLAYER
temp1 <- paste0("tempFiles/", id, "_", pID_1, ".csv")
temp2 <- paste0("tempFiles/", id, "_", pID_2, ".csv")
df1$minutes <- as.character(df1$minutes)
df2$minutes <- as.character(df1$minutes)
write.csv(df1, file = temp1, row.names = FALSE)
write.csv(df2, file = temp2, row.names = FALSE)
gs_upload(temp1)
gs_upload(temp2)
## RETURN
allDF
}
processGame(6336526)
?gsub
extractAdvancedGameDetails <- function(adJSON, id, dd) {
## PREPARE INTERVALS
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
## STORAGE DATA FRAMES
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
## COL(1): Id of the player
pID_1 <- dd[dd$gameID == id, "p1_ID"]
pID_2 <- dd[dd$gameID == id, "p2_ID"]
df1[, 1] <- dd[dd$gameID == id, "p1_ID"]
df2[, 1] <- dd[dd$gameID == id, "p2_ID"]
names(df1)[1] <- "game"
names(df2)[1] <- "game"
## COL(2): Name of the player
df1$name <- dd[dd$gameID == id, "p1_name"]
df2$name <- dd[dd$gameID == id, "p2_name"]
## COL(3): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2$minutes <- df1[, 3]
## COL(4): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1$lost <- resourcesLost[[p1]]
df2$lost <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1$workers <- activeWorkers[[p1]]
df2$workers <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1$minerals <- currentMinerals[[p1]]
df2$minerals <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1$minerals_cr <- mineralsCollectionRate[[p1]]
df2$minerals_cr <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(10): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(11): Player Bases
gameDuration <- dd[dd$gameID == id, "gameDuration"]*16
bInfo <- basesInfo(adJSON, int, 16, gameDuration)
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
## COL(12): Upgrades
if(p1 == 1) {
races <- c(as.character(dd[dd$gameID == id, "p1_race"]), as.character(dd[dd$gameID == id, "p2_race"]))
} else races <- c(as.character(dd[dd$gameID == id, "p2_race"]), as.character(dd[dd$gameID == id, "p1_race"]))
upgradesInfo <- computeUpgrades(adJSON, int, 8, races)
df1$upgrades <- upgradesInfo[[p1]]
df2$upgrades <- upgradesInfo[[p2]]
## COL(13): Army info
units <- computeArmy(adJSON, int, 6, races, gameDuration)
df1$units <- units[[p1]]
df2$units <- units[[p2]]
## FLATTEN DFs
df1 <- flatten(df1)
df2 <- flatten(df2)
## RBIND
allDF <- rbind(df1, df2)
## UPLOAD: Craete temps and upload ADV. info x PLAYER
temp1 <- paste0("tempFiles/", id, "_", pID_1, ".csv")
temp2 <- paste0("tempFiles/", id, "_", pID_2, ".csv")
df1$minutes <- gsub(".", ",", df1$minutes)
df2$minutes <- gsub(".", ",", df2$minutes)
write.csv(df1, file = temp1, row.names = FALSE)
write.csv(df2, file = temp2, row.names = FALSE)
gs_upload(temp1)
gs_upload(temp2)
## RETURN
allDF
}
df[-c(1:66)]
df <- df[-c(1:66)]
dd <- dd[-1]
df <- df[-c(1:66), ]
dd <- dd[-1, ]
processGame(6336526)
extractAdvancedGameDetails <- function(adJSON, id, dd) {
## PREPARE INTERVALS
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
## STORAGE DATA FRAMES
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
## COL(1): Id of the player
pID_1 <- dd[dd$gameID == id, "p1_ID"]
pID_2 <- dd[dd$gameID == id, "p2_ID"]
df1[, 1] <- dd[dd$gameID == id, "p1_ID"]
df2[, 1] <- dd[dd$gameID == id, "p2_ID"]
names(df1)[1] <- "game"
names(df2)[1] <- "game"
## COL(2): Name of the player
df1$name <- dd[dd$gameID == id, "p1_name"]
df2$name <- dd[dd$gameID == id, "p2_name"]
## COL(3): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2$minutes <- df1[, 3]
## COL(4): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1$lost <- resourcesLost[[p1]]
df2$lost <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1$workers <- activeWorkers[[p1]]
df2$workers <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1$minerals <- currentMinerals[[p1]]
df2$minerals <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1$minerals_cr <- mineralsCollectionRate[[p1]]
df2$minerals_cr <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(10): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(11): Player Bases
gameDuration <- dd[dd$gameID == id, "gameDuration"]*16
bInfo <- basesInfo(adJSON, int, 16, gameDuration)
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
## COL(12): Upgrades
if(p1 == 1) {
races <- c(as.character(dd[dd$gameID == id, "p1_race"]), as.character(dd[dd$gameID == id, "p2_race"]))
} else races <- c(as.character(dd[dd$gameID == id, "p2_race"]), as.character(dd[dd$gameID == id, "p1_race"]))
upgradesInfo <- computeUpgrades(adJSON, int, 8, races)
df1$upgrades <- upgradesInfo[[p1]]
df2$upgrades <- upgradesInfo[[p2]]
## COL(13): Army info
units <- computeArmy(adJSON, int, 6, races, gameDuration)
df1$units <- units[[p1]]
df2$units <- units[[p2]]
## FLATTEN DFs
df1 <- flatten(df1)
df2 <- flatten(df2)
## RBIND
allDF <- rbind(df1, df2)
## UPLOAD: Craete temps and upload ADV. info x PLAYER
temp1 <- paste0("tempFiles/", id, "_", pID_1, ".csv")
temp2 <- paste0("tempFiles/", id, "_", pID_2, ".csv")
df1$minutes <- gsub("\\.", ",", df1$minutes)
df2$minutes <- gsub("\\.", ",", df2$minutes)
write.csv(df1, file = temp1, row.names = FALSE)
write.csv(df2, file = temp2, row.names = FALSE)
gs_upload(temp1)
gs_upload(temp2)
## RETURN
allDF
}
processGame(6336526)
which(names(df) == supply.currentSupply)
which(names(df) == supply.currentSupply)
names(df)
View(df[, "supply.currentSupply"])
which(names(df) == "supply.currentSupply")
extractAdvancedGameDetails <- function(adJSON, id, dd) {
## PREPARE INTERVALS
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
## STORAGE DATA FRAMES
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
## COL(1): Id of the player
pID_1 <- dd[dd$gameID == id, "p1_ID"]
pID_2 <- dd[dd$gameID == id, "p2_ID"]
df1[, 1] <- dd[dd$gameID == id, "p1_ID"]
df2[, 1] <- dd[dd$gameID == id, "p2_ID"]
names(df1)[1] <- "game"
names(df2)[1] <- "game"
## COL(2): Name of the player
df1$name <- dd[dd$gameID == id, "p1_name"]
df2$name <- dd[dd$gameID == id, "p2_name"]
## COL(3): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2$minutes <- df1[, 3]
## COL(4): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1$lost <- resourcesLost[[p1]]
df2$lost <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1$workers <- activeWorkers[[p1]]
df2$workers <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1$minerals <- currentMinerals[[p1]]
df2$minerals <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1$minerals_cr <- mineralsCollectionRate[[p1]]
df2$minerals_cr <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(10): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(11): Player Bases
gameDuration <- dd[dd$gameID == id, "gameDuration"]*16
bInfo <- basesInfo(adJSON, int, 16, gameDuration)
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
## COL(12): Upgrades
if(p1 == 1) {
races <- c(as.character(dd[dd$gameID == id, "p1_race"]), as.character(dd[dd$gameID == id, "p2_race"]))
} else races <- c(as.character(dd[dd$gameID == id, "p2_race"]), as.character(dd[dd$gameID == id, "p1_race"]))
upgradesInfo <- computeUpgrades(adJSON, int, 8, races)
df1$upgrades <- upgradesInfo[[p1]]
df2$upgrades <- upgradesInfo[[p2]]
## COL(13): Army info
units <- computeArmy(adJSON, int, 6, races, gameDuration)
df1$units <- units[[p1]]
df2$units <- units[[p2]]
## FLATTEN DFs
df1 <- flatten(df1)
df2 <- flatten(df2)
## RBIND
allDF <- rbind(df1, df2)
## UPLOAD: Craete temps and upload ADV. info x PLAYER
temp1 <- paste0("tempFiles/", id, "_", pID_1, ".csv")
temp2 <- paste0("tempFiles/", id, "_", pID_2, ".csv")
df1$minutes <- gsub("\\.", ",", df1$minutes)
df2$minutes <- gsub("\\.", ",", df2$minutes)
df1[, 10] <- gsub("\\.", ",", df1[, 10])
df2[, 10] <- gsub("\\.", ",", df2[, 10])
write.csv(df1, file = temp1, row.names = FALSE)
write.csv(df2, file = temp2, row.names = FALSE)
gs_upload(temp1)
gs_upload(temp2)
## RETURN
allDF
}
processGame(6336526)
rm(dd, df)
dd <- createSimpleDF()
df <- createAdvancedDF()

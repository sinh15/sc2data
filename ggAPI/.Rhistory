?flatten
??flatten
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345004"
adJSON <- fromJSON(adJSON)
library(jsonlite)
adJSON <- fromJSON(adJSON)
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345542"
adJSON <- fromJSON(adJSON)
library(jasonlite)
library(jsonlite)
adJSON <- fromJSON(adJSON)
names(adJSON)
x <- adJSON[[8]]
names(x)
x <- x[[1]]
View(x)
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345614"
adJSON <- fromJSON(adJSON)
x <- adJSON[[8]][[1]]
View8x
View(x)
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345638"
adJSON <- fromJSON(adJSON)
View(adJSON[[8]][[1]])
library(googlesheets)
library(jsonlite)
library(dplyr)
source('buildingFunctions.R')
source('spreadsheetsConnection.R')
source('listofupgrades.R')
setwd("~/GitHub/sc2data/ggAPI")
source('buildingFunctions.R')
source('spreadsheetsConnection.R')
source('listofupgrades.R')
dd <- readSimpleDataFrameSS()
upgrades <- readUpgradesList()
View(upgrades)
class(upgrades)
gameJSON <- "http://api.ggtracker.com/api/v1/matches/6336526.json"
gameJSON <- fromJSON(gameJSON)
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6336526"
adJSON <- fromJSON(adJSON)
## PREPARE INTERVALS
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
## STORAGE DATA FRAMES
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
## COL(1): Id of the player
pID_1 <- dd[dd$gameID == 6336526, "p1_ID"]
pID_2 <- dd[dd$gameID == 6336526, "p2_ID"]
df1[, 1] <- dd[dd$gameID == 6336526, "p1_ID"]
df2[, 1] <- dd[dd$gameID == 6336526, "p2_ID"]
names(df1)[1] <- "game"
names(df2)[1] <- "game"
## COL(2): Name of the player
df1$name <- dd[dd$gameID == 6336526, "p1_name"]
df2$name <- dd[dd$gameID == 6336526, "p2_name"]
## COL(3): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2$minutes <- df1[, 3]
## COL(4): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1$lost <- resourcesLost[[p1]]
df2$lost <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1$workers <- activeWorkers[[p1]]
df2$workers <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1$minerals <- currentMinerals[[p1]]
df2$minerals <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1$minerals_cr <- mineralsCollectionRate[[p1]]
df2$minerals_cr <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(10): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(11): Player Bases
bInfo <- basesInfo(adJSON, int, 16, dd[dd$gameID == 6336526, "gameDuration"])
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
dd <- addGameSimpleDF(dd, gameJSON)
## PREPARE INTERVALS
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
## STORAGE DATA FRAMES
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
## COL(1): Id of the player
pID_1 <- dd[dd$gameID == 6336526, "p1_ID"]
pID_2 <- dd[dd$gameID == 6336526, "p2_ID"]
df1[, 1] <- dd[dd$gameID == 6336526, "p1_ID"]
df2[, 1] <- dd[dd$gameID == 6336526, "p2_ID"]
names(df1)[1] <- "game"
names(df2)[1] <- "game"
## COL(2): Name of the player
df1$name <- dd[dd$gameID == 6336526, "p1_name"]
df2$name <- dd[dd$gameID == 6336526, "p2_name"]
## COL(3): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2$minutes <- df1[, 3]
## COL(4): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1$lost <- resourcesLost[[p1]]
df2$lost <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1$workers <- activeWorkers[[p1]]
df2$workers <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1$minerals <- currentMinerals[[p1]]
df2$minerals <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1$minerals_cr <- mineralsCollectionRate[[p1]]
df2$minerals_cr <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(10): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(11): Player Bases
bInfo <- basesInfo(adJSON, int, 16, dd[dd$gameID == 6336526, "gameDuration"])
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
## ============================== ##
## EXTRACT MAS BLOCKS 10 SECONDS  ##
## ============================== ##
extractMaxs10SecondsBlocks <- function(adJSON, int, columnIndex) {
g30 <- list()
for(i in c(1:length(adJSON[[columnIndex]]))) {
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("toExtract")
g30[i] <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(toExtract = max(toExtract)) %>% select(toExtract)
}
names(g30) <- names(adJSON[[columnIndex]])
g30
}
## ============================== ##
## SUPPLY USAGE DATA EXTRACTION   ##
## ============================== ##
supplyUsage <- function(adJSON, int, columnIndex) {
supply <- list()
for(i in c(1:length(adJSON[[columnIndex]]))) {
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("currentSupply", "maxSupply")
xi <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(currentSupply = max(currentSupply), maxSupply = max(maxSupply))
xi <- castNormalDF(xi)
if(i == 1) supply$v1 <- xi[, 2:3]
else supply$v2 <- xi[, 2:3]
}
supply
}
## ============================== ##
## CAPTURE BASES INFORMATION      ##
## ============================== ##
basesInfo <- function(adJSON, int, columnIndex, gameDuration) {
# game duration -> to frames
durationFrames <- gameDuration*16
#basesInfo: num_bases, bases_destroyed, bases_cancelled
basesInfo <- list()
# (compute created / destroyed / cancelled)
for(i in c(1:length(adJSON[[columnIndex]]))) {
## XI: get player data frame
xi <- adJSON[[columnIndex]][[i]][[2]]
## INTERVALS: bases created, destroyed, cancelled
alive <- as.array(ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), NA))
destroyed <- ifelse(!is.na(xi[, 1]) & xi[, 2] < durationFrames, floor(xi[, 2]/(16*30)+1), NA)
cancelled <- ifelse(is.na(xi[, 1]), floor(xi[, 2]/(16*30)+1), NA)
## ADD all bases data
len <- max(int)+1
bAlive <- array(data = rep(0, len), dim = len)
bDestroyed <- array(data = rep(0, len), dim = len)
bCancelled <- array(data = rep(0, len), dim = len)
for(j in c(1:length(alive))) {
if(!is.na(alive[j])) bAlive[alive[j]:len] <- 1+bAlive[alive[j]:len]
if(!is.na(destroyed[j])) {
bAlive[destroyed[j]:len] <- bAlive[destroyed[j]:len]-1
bDestroyed[destroyed[j]:len] <- 1+bDestroyed[destroyed[j]:len]
}
if(!is.na(cancelled[j])) bCancelled[cancelled[j]:len] <- 1+bCancelled[cancelled[j]:len]
}
## Add to solution
if(i == 1) {
pBases <- data.frame(num_bases = bAlive, bases_destroyed = bDestroyed, bases_cancelled = bCancelled)
basesInfo$p1 <- pBases
} else {
pBases <- data.frame(num_bases = bAlive, bases_destroyed = bDestroyed, bases_cancelled = bCancelled)
basesInfo$p2 <- pBases
}
}
#return statement
basesInfo
}
## PREPARE INTERVALS
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
## STORAGE DATA FRAMES
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
## COL(1): Id of the player
pID_1 <- dd[dd$gameID == 6336526, "p1_ID"]
pID_2 <- dd[dd$gameID == 6336526, "p2_ID"]
df1[, 1] <- dd[dd$gameID == 6336526, "p1_ID"]
df2[, 1] <- dd[dd$gameID == 6336526, "p2_ID"]
names(df1)[1] <- "game"
names(df2)[1] <- "game"
## COL(2): Name of the player
df1$name <- dd[dd$gameID == 6336526, "p1_name"]
df2$name <- dd[dd$gameID == 6336526, "p2_name"]
## COL(3): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2$minutes <- df1[, 3]
## COL(4): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1$lost <- resourcesLost[[p1]]
df2$lost <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1$workers <- activeWorkers[[p1]]
df2$workers <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1$minerals <- currentMinerals[[p1]]
df2$minerals <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1$minerals_cr <- mineralsCollectionRate[[p1]]
df2$minerals_cr <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(10): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(11): Player Bases
bInfo <- basesInfo(adJSON, int, 16, dd[dd$gameID == 6336526, "gameDuration"])
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
x <- adJSON[[8]]
names(adJSON)
names(x)
x <- x[[1]]
View(x)
?data.frame
length(upgrades)
length(upgrades[, 1])
?matrix
exists(upgrades)
exists(upgrades)
exists("upgrades")
!exists("upgrades")
x <- adJSON[[8]][[1]]
View(x)
length(upgrades[, 1])
length(upgrades[, 1])*len
len <- max(int)+1
len
length(upgrades[, 1])*len
pUpgrades <- as.data.frame(matrix(data = rep(0, len*length(upgrades[, 1])), ncol = length(upgrades[, 1], nrow = len)))
pUpgrades <- as.data.frame(matrix(data = rep(0, len*length(upgrades[, 1])), ncol = length(upgrades[, 1]), nrow = len))
View(pUpgrades)
class(pUpgrades)
names(pUpgrades)
upgrades[, 1]
names(pUpgrades) <- upgrades[, 1]
View(pUpgrades)
x[, 1]
x[, 2]
xi <- adJSON[[8]][[1]]
length(xi)
View(xi)
class(xi)
dim(matrix)
dim(xi)
dmi(xi)[1]
dim(xi)[1]
xi[1, 1]
xi[1, 2]
columnIndex <- 8
upgradesInfo <- list()
if(!exists("upgrades")) <- readUpgradesList()
if(!exists("upgrades")) upgrades <- readUpgradesList()
len <- max(int)+1
i <- 1
j <- 1
xi <- adJSON[[columnIndex]][[i]]
pUpgrades <- as.data.frame(matrix(data = rep(0, len*length(upgrades[, 1])), ncol = length(upgrades[, 1]), nrow = len))
names(pUpgrades) <- upgrades[, 1]
pUpgrades[floor(xi[j, 2]/(16*30)+1), xi[j, 1]]
xi[j, 2]
class(xi[1, 2])
pUpgrades[floor(as.numeric(xi[j, 2])/(16*30)+1), xi[j, 1]]
pUpgrades[floor(as.numeric(xi[j, 2])/(16*30)+1), xi[j, 1]] <- 1
View(pUpgrades)
upgradesInfo <- list()
upgradesInfo <- c(upgradesInfo, pUpgrades)
length(upgradesInfo)
View(upgradesInfo)
upgradesInfo <- c(upgradesInfo, pUpgrades)
length(upgradesInfo)
class(upgradesInfo)
class(pUpgrades)
upgradesInfo <- list()
upgradesInfo$p1 <- pUpgrades
length(upgradesInfo)
## ============================== ##
computeUpgrades <- function(adJSON, int, columnIndex) {
#upgradesInfo: P1 & P2 dataframes
upgradesInfo <- list()
# check varaibles are avaiable
if(!exists("upgrades")) upgrades <- readUpgradesList()
len <- max(int)+1
# compute upgrades
for(i in c(1:length(adJSON[[columnIndex]]))) {
## prepare environment
xi <- adJSON[[columnIndex]][[i]]
pUpgrades <- as.data.frame(matrix(data = rep(0, len*length(upgrades[, 1])), ncol = length(upgrades[, 1]), nrow = len))
names(pUpgrades) <- upgrades[, 1]
## add upgrades
for(j in c(1:dim(xi)[1])) {
pUpgrades[floor(as.numeric(xi[j, 2])/(16*30)+1), xi[j, 1]] <- 1
}
## add uplayer upgrades to list
if(i == 1) upgradesInfo$p1 <- pUpgrades
else upgradesInfo$p2 <- pUpgrades
}
upgradesInfo
}
View(df1)
names(adJSON[[17]])
upgradesInfo <- computeUpgrades(adJSON, int, 8)
df1$upgrades <- upgradesInfo[[p1]]
df2$upgrades <- upgradesInfo[[p2]]
View(df1)
x <- df1$upgrades
View(x)
y <- adJSON[[8]][[1]]
View(y)
View(x)
x <- df2$upgrades
View(x)
View(y)
x <- df1$upgrades
y <- adJSON[[8]][[2]]
View(x)
View(y)
rm(pUpgrades)
rm(x, xi, y)
rm(upgrades)
rm(activeWorkers, bInfo, columnIndex, currentMinerals, currentVespene, i, int)
rm(j, len, mineralsCollectionRate)
rm(resourcesLost, supplyData, upgradesInf)
rm(upgradesInfo)
rm(vespeneCollectionRate)
names(adJSON)
x <- adJSON[[6]]
names(x)
x <- x[[1]]
class(x)
View(x)
length(df1)

cancelled
View(xi)
uploadGames <- function(dd, missingGames, ss) {
## upload games that are missing
missing <- which(is.na(missingGames))
for(i in c(1:length(missing))) {
dd[i, "p1_race"] <- as.character(dd[i, "p1_race"])
gs_add_row(ss, "simpleDF_1", input = dd[missing[i], ])
}
}
bAlive
alive
bAlive[9:max(int)+1] <- 1+bAlive(9:max(int)+1])
bAlive[9:max(int)+1] <- 1+bAlive[9:max(int)+1]
bAlive
?lapply
?tapply
?apply
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
addBases <- function(x) {
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
if(!is.na(x)) bAlive[x:max(int)+1] <- 1+bAlive[9:max(int)+1]
bAlive
}
bAlive <- apply(alive, 1, addBases())
addBases <- function(parameter, len) {
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
if(!is.na(x)) bAlive[x:max(int)+1] <- 1+bAlive[9:max(int)+1]
bAlive
}
bAlive <- apply(alive, 1, addBases(), parameter = "ADD", len = max(int)+1)
bAlive <- apply(alive, 1, addBases(x), parameter = "ADD", len = max(int)+1)
addBases <- function(x) {
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
if(!is.na(x)) bAlive[x:max(int)+1] <- 1+bAlive[9:max(int)+1]
bAlive
}
bAlive <- apply(alive, 1, addBases())
bAlive <- apply(alive, 1, function(x) if(!is.na(x)) bAlive[x:max(int)+1] <- 1+bAlive[9:max(int)+1])
bAlive <- apply(alive, 1, function(x) if(!is.na(x)) bAlive[x:max(int)+1] <- 1+bAlive[9:max(int)+1])
bAlive <- apply(alive, 1, function(x) if(!is.na(x)) bAlive[x:max(int)+1] <- 1+bAlive[x:max(int)+1])
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
alive <- ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), 0)
bAlive <- apply(alive, 1, function(x) if(!is.na(x)) bAlive[x:max(int)+1] <- 1+bAlive[x:max(int)+1])
bAlive <- apply(alive, 1, function(x) if(!is.na(x)) bAlive[x] <- 2])
bAlive <- apply(alive, 1, function(x) if(!is.na(x)) bAlive[x] <- 2)
bAlive <- apply(alive, 1, function(x) bAlive[x] <- x)
alive
bAlive <- apply(alive, 1, function(x) x)
class(alive)
bAlive <- apply(alive, 1, function(x) length(x))
is.vector(alive)
bAlive <- apply(alive, 2, function(x) length(x))
dim(alive)
alive <- as.array(alive)
bAlive <- apply(alive, 1, function(x) length(x))
bAlive
addBases <- function(x) {
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
if(!is.na(x)) bAlive[x:max(int)+1] <- 1+bAlive[9:max(int)+1]
bAlive
}
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
alive <- as.array(ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), 0))
bAlive <- apply(alive, 1, function(x) x)
bAlive
bAlive <- apply(alive, 1, function(x) x+1)
bAlive
addBases <- function(x) {
x+1
}
bAlive <- apply(alive, 1, addBases(x))
bAlive <- apply(alive, 1, addBases())
bAlive <- apply(alive, 1, function(x) addBases(x))
bAlive
bAlive <- apply(alive, 1, function(x) addBases(x))
bAlive
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
bAlive <- apply(alive, 1, function(x) addBases(x))
bAlive
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
bAlive
bAlive <- apply(alive, 1, function(x) addBases(x))
bAlive
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
addBases <- function(x, operator, len) {
bAlive[x:len] <- 1+bAlive[x:len]
}
bAlive <- apply(alive, 1, function(x) addBases(x, add, max(int)+1))
bAlive
alive
length(alive)
length(destroyed)
length(cancelled)
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
alive <- as.array(ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), 0))
bAlive[alive[1]:len] <- 1+bAlive[alive[1]:len]
len <- max(int)+1
bAlive[alive[1]:len] <- 1+bAlive[alive[1]:len]
bAlive
bAlive[alive[2]:len] <- 1+bAlive[alive[2]:len]
bAlive
alive
alive <- as.array(ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), NA))
alive
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
alive <- as.array(ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), NA))
bAlive <- array(data = rep(0, max(int)+1), dim = max(int)+1)
bDestroyed <- array(data = rep(0, max(int)+1), dim = max(int)+1)
bCancelled <- array(data = rep(0, max(int)+1), dim = max(int)+1)
##alternative method
alive <- as.array(ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), NA))
destroyed <- ifelse(!is.na(xi[, 1]) & xi[, 2] < durationFrames, floor(xi[, 2]/(16*30)+1), NA)
cancelled <- ifelse(is.na(xi[, 1]), floor(xi[, 2]/(16*30)+1), NA)
len <- max(int)+1
for(j in c(1:length(alive))) {
if(!is.na(alive[j])) bAlive[alive[j]:len] <- 1+bAlive[alive[j]:len]
if(!is.na(destroyed[j])) {
bAlive[destroyed[j]:len] <- 1-bAlive[destroyed[j]:len]
bDestroyed[destroyed[j]:len] <- 1+bDestroyed[destroyed[j]:len]
}
if(!is.na(cancelled[j])) bCancelled[cancelled[j]:len] <- 1+bCancelled[cancelled[j]:len]
}
bAlive
bDestroyed
bCancelled
basesInfo <- function(adJSON, int, columnIndex, gameDuration) {
# game duration -> to frames
durationFrames <- gameDuration*16
#basesInfo: num_bases, bases_destroyed, bases_cancelled
basesInfo <- list()
# (compute created / destroyed)
for(i in c(1:length(adJSON[[columnIndex]]))) {
## INTERVALS: bases created, destroyed, cancelled
alive <- as.array(ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), NA))
destroyed <- ifelse(!is.na(xi[, 1]) & xi[, 2] < durationFrames, floor(xi[, 2]/(16*30)+1), NA)
cancelled <- ifelse(is.na(xi[, 1]), floor(xi[, 2]/(16*30)+1), NA)
## ADD all bases data
len <- max(int)+1
bAlive <- array(data = rep(0, max(int)+1), dim = len)
bDestroyed <- array(data = rep(0, max(int)+1), dim = len)
bCancelled <- array(data = rep(0, max(int)+1), dim = len)
for(j in c(1:length(alive))) {
if(!is.na(alive[j])) bAlive[alive[j]:len] <- 1+bAlive[alive[j]:len]
if(!is.na(destroyed[j])) {
bAlive[destroyed[j]:len] <- 1-bAlive[destroyed[j]:len]
bDestroyed[destroyed[j]:len] <- 1+bDestroyed[destroyed[j]:len]
}
if(!is.na(cancelled[j])) bCancelled[cancelled[j]:len] <- 1+bCancelled[cancelled[j]:len]
}
#         #extract each player bases information
#         xi <- adJSON[[columnIndex]][[i]][[2]]
#         for(j in c(1:dim(xi)[1])) {
#             if(!is.na(xi[j, 1])) {
#                 pos <- floor(xi[j, 1]/(16*30)+1)
#                 bAlive[pos] <- bAlive[pos] + 1
#                 if(xi[j, 2] < durationFrames) {
#                     pos <- floor(xi[j, 2]/(16*30)+1)
#                     bDestroyed[pos] <- bDestroyed[pos] + 1
#                 }
#             } else {
#                 pos <- floor(xi[j, 2]/(16*30)+1)
#                 bCancelled[pos] <- bCancelled[pos] +1
#             }
#         }
#
#         #adjunt numbers
#         alive <- 0;
#         destroyed <- 0;
#         cancelled <- 0;
#         for(j in c(1:max(int+1))) {
#             alive <- alive + bAlive[j] - bDestroyed[j]
#             destroyed <- destroyed + bDestroyed[j]
#             cancelled <- cancelled + bCancelled[j]
#             bAlive[j] <- alive
#             bDestroyed[j] <- destroyed
#             bCancelled[j] <- cancelled
#         }
## Add to solution
if(i == 1) {
pBases <- data.frame(num_bases = bAlive, bases_destroyed = bDestroyed, bases_cancelled = bCancelled)
basesInfo$p1 <- pBases
} else {
pBases <- data.frame(num_bases = bAlive, bases_destroyed = bDestroyed, bases_cancelled = bCancelled)
basesInfo$p2 <- pBases
}
}
# (end compute created / destroyed)
#return statement
basesInfo
}
## COL(11): Player Bases
bInfo <- basesInfo(adJSON, int, 16, dd[dd$gameID == 6336526, "gameDuration"])
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
View(df1)
View(df2)
bInfo
xi <- adJSON[[columnIndex]][[i]]
basesInfo <- function(adJSON, int, columnIndex, gameDuration) {
# game duration -> to frames
durationFrames <- gameDuration*16
#basesInfo: num_bases, bases_destroyed, bases_cancelled
basesInfo <- list()
# (compute created / destroyed)
for(i in c(1:length(adJSON[[columnIndex]]))) {
## XI: get player data frame
xi <- adJSON[[columnIndex]][[i]]
## INTERVALS: bases created, destroyed, cancelled
alive <- as.array(ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), NA))
destroyed <- ifelse(!is.na(xi[, 1]) & xi[, 2] < durationFrames, floor(xi[, 2]/(16*30)+1), NA)
cancelled <- ifelse(is.na(xi[, 1]), floor(xi[, 2]/(16*30)+1), NA)
## ADD all bases data
len <- max(int)+1
bAlive <- array(data = rep(0, max(int)+1), dim = len)
bDestroyed <- array(data = rep(0, max(int)+1), dim = len)
bCancelled <- array(data = rep(0, max(int)+1), dim = len)
for(j in c(1:length(alive))) {
if(!is.na(alive[j])) bAlive[alive[j]:len] <- 1+bAlive[alive[j]:len]
if(!is.na(destroyed[j])) {
bAlive[destroyed[j]:len] <- 1-bAlive[destroyed[j]:len]
bDestroyed[destroyed[j]:len] <- 1+bDestroyed[destroyed[j]:len]
}
if(!is.na(cancelled[j])) bCancelled[cancelled[j]:len] <- 1+bCancelled[cancelled[j]:len]
}
#         #extract each player bases information
#         xi <- adJSON[[columnIndex]][[i]][[2]]
#         for(j in c(1:dim(xi)[1])) {
#             if(!is.na(xi[j, 1])) {
#                 pos <- floor(xi[j, 1]/(16*30)+1)
#                 bAlive[pos] <- bAlive[pos] + 1
#                 if(xi[j, 2] < durationFrames) {
#                     pos <- floor(xi[j, 2]/(16*30)+1)
#                     bDestroyed[pos] <- bDestroyed[pos] + 1
#                 }
#             } else {
#                 pos <- floor(xi[j, 2]/(16*30)+1)
#                 bCancelled[pos] <- bCancelled[pos] +1
#             }
#         }
#
#         #adjunt numbers
#         alive <- 0;
#         destroyed <- 0;
#         cancelled <- 0;
#         for(j in c(1:max(int+1))) {
#             alive <- alive + bAlive[j] - bDestroyed[j]
#             destroyed <- destroyed + bDestroyed[j]
#             cancelled <- cancelled + bCancelled[j]
#             bAlive[j] <- alive
#             bDestroyed[j] <- destroyed
#             bCancelled[j] <- cancelled
#         }
## Add to solution
if(i == 1) {
pBases <- data.frame(num_bases = bAlive, bases_destroyed = bDestroyed, bases_cancelled = bCancelled)
basesInfo$p1 <- pBases
} else {
pBases <- data.frame(num_bases = bAlive, bases_destroyed = bDestroyed, bases_cancelled = bCancelled)
basesInfo$p2 <- pBases
}
}
# (end compute created / destroyed)
#return statement
basesInfo
}
## COL(11): Player Bases
bInfo <- basesInfo(adJSON, int, 16, dd[dd$gameID == 6336526, "gameDuration"])
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
xi <- adJSON[[16]][[1]]
View(xi)
xi <- adJSON[[16]][[2]]
View(xi)
length(xi)
xi[, 1]
xi <- as.data.frame(adJSON[[columnIndex]][[1]])
xi[, 1]
xi <- adJSON[[columnIndex]][[i]]
alive <- as.array(ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), NA))
destroyed <- ifelse(!is.na(xi[, 1]) & xi[, 2] < durationFrames, floor(xi[, 2]/(16*30)+1), NA)
cancelled <- ifelse(is.na(xi[, 1]), floor(xi[, 2]/(16*30)+1), NA)
len <- max(int)+1
bAlive <- array(data = rep(0, max(int)+1), dim = len)
bDestroyed <- array(data = rep(0, max(int)+1), dim = len)
bCancelled <- array(data = rep(0, max(int)+1), dim = len)
for(j in c(1:length(alive))) {
if(!is.na(alive[j])) bAlive[alive[j]:len] <- 1+bAlive[alive[j]:len]
if(!is.na(destroyed[j])) {
bAlive[destroyed[j]:len] <- 1-bAlive[destroyed[j]:len]
bDestroyed[destroyed[j]:len] <- 1+bDestroyed[destroyed[j]:len]
}
if(!is.na(cancelled[j])) bCancelled[cancelled[j]:len] <- 1+bCancelled[cancelled[j]:len]
}
bAlive
bAlive <- array(data = rep(0, len), dim = len)
bDestroyed <- array(data = rep(0, len), dim = len)
bCancelled <- array(data = rep(0, len), dim = len)
alive
destroyed
cancelled
alive
bAlive
for(j in c(1:length(alive))) {
if(!is.na(alive[j])) bAlive[alive[j]:len] <- 1+bAlive[alive[j]:len]
if(!is.na(destroyed[j])) {
bAlive[destroyed[j]:len] <- 1-bAlive[destroyed[j]:len]
bDestroyed[destroyed[j]:len] <- 1+bDestroyed[destroyed[j]:len]
}
if(!is.na(cancelled[j])) bCancelled[cancelled[j]:len] <- 1+bCancelled[cancelled[j]:len]
}
bAlive
bAlive <- array(data = rep(0, len), dim = len)
bDestroyed <- array(data = rep(0, len), dim = len)
bCancelled <- array(data = rep(0, len), dim = len)
j <- 1
if(!is.na(alive[j])) bAlive[alive[j]:len] <- 1+bAlive[alive[j]:len]
if(!is.na(destroyed[j])) {
bAlive[destroyed[j]:len] <- 1-bAlive[destroyed[j]:len]
bDestroyed[destroyed[j]:len] <- 1+bDestroyed[destroyed[j]:len]
}
if(!is.na(cancelled[j])) bCancelled[cancelled[j]:len] <- 1+bCancelled[cancelled[j]:len]
bAlive
!is.na(alive[j])
View(xi)
basesInfo <- function(adJSON, int, columnIndex, gameDuration) {
# game duration -> to frames
durationFrames <- gameDuration*16
#basesInfo: num_bases, bases_destroyed, bases_cancelled
basesInfo <- list()
# (compute created / destroyed)
for(i in c(1:length(adJSON[[columnIndex]]))) {
## XI: get player data frame
xi <- adJSON[[columnIndex]][[i]][[2]]
## INTERVALS: bases created, destroyed, cancelled
alive <- as.array(ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), NA))
destroyed <- ifelse(!is.na(xi[, 1]) & xi[, 2] < durationFrames, floor(xi[, 2]/(16*30)+1), NA)
cancelled <- ifelse(is.na(xi[, 1]), floor(xi[, 2]/(16*30)+1), NA)
## ADD all bases data
len <- max(int)+1
bAlive <- array(data = rep(0, len), dim = len)
bDestroyed <- array(data = rep(0, len), dim = len)
bCancelled <- array(data = rep(0, len), dim = len)
for(j in c(1:length(alive))) {
if(!is.na(alive[j])) bAlive[alive[j]:len] <- 1+bAlive[alive[j]:len]
if(!is.na(destroyed[j])) {
bAlive[destroyed[j]:len] <- 1-bAlive[destroyed[j]:len]
bDestroyed[destroyed[j]:len] <- 1+bDestroyed[destroyed[j]:len]
}
if(!is.na(cancelled[j])) bCancelled[cancelled[j]:len] <- 1+bCancelled[cancelled[j]:len]
}
#         #extract each player bases information
#         xi <- adJSON[[columnIndex]][[i]][[2]]
#         for(j in c(1:dim(xi)[1])) {
#             if(!is.na(xi[j, 1])) {
#                 pos <- floor(xi[j, 1]/(16*30)+1)
#                 bAlive[pos] <- bAlive[pos] + 1
#                 if(xi[j, 2] < durationFrames) {
#                     pos <- floor(xi[j, 2]/(16*30)+1)
#                     bDestroyed[pos] <- bDestroyed[pos] + 1
#                 }
#             } else {
#                 pos <- floor(xi[j, 2]/(16*30)+1)
#                 bCancelled[pos] <- bCancelled[pos] +1
#             }
#         }
#
#         #adjunt numbers
#         alive <- 0;
#         destroyed <- 0;
#         cancelled <- 0;
#         for(j in c(1:max(int+1))) {
#             alive <- alive + bAlive[j] - bDestroyed[j]
#             destroyed <- destroyed + bDestroyed[j]
#             cancelled <- cancelled + bCancelled[j]
#             bAlive[j] <- alive
#             bDestroyed[j] <- destroyed
#             bCancelled[j] <- cancelled
#         }
## Add to solution
if(i == 1) {
pBases <- data.frame(num_bases = bAlive, bases_destroyed = bDestroyed, bases_cancelled = bCancelled)
basesInfo$p1 <- pBases
} else {
pBases <- data.frame(num_bases = bAlive, bases_destroyed = bDestroyed, bases_cancelled = bCancelled)
basesInfo$p2 <- pBases
}
}
# (end compute created / destroyed)
#return statement
basesInfo
}
bInfo <- basesInfo(adJSON, int, 16, dd[dd$gameID == 6336526, "gameDuration"])
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
View(df1)
View(df2)
basesInfo <- function(adJSON, int, columnIndex, gameDuration) {
# game duration -> to frames
durationFrames <- gameDuration*16
#basesInfo: num_bases, bases_destroyed, bases_cancelled
basesInfo <- list()
# (compute created / destroyed)
for(i in c(1:length(adJSON[[columnIndex]]))) {
## XI: get player data frame
xi <- adJSON[[columnIndex]][[i]][[2]]
## INTERVALS: bases created, destroyed, cancelled
alive <- as.array(ifelse(!is.na(xi[, 1]), floor(xi[, 1]/(16*30)+1), NA))
destroyed <- ifelse(!is.na(xi[, 1]) & xi[, 2] < durationFrames, floor(xi[, 2]/(16*30)+1), NA)
cancelled <- ifelse(is.na(xi[, 1]), floor(xi[, 2]/(16*30)+1), NA)
## ADD all bases data
len <- max(int)+1
bAlive <- array(data = rep(0, len), dim = len)
bDestroyed <- array(data = rep(0, len), dim = len)
bCancelled <- array(data = rep(0, len), dim = len)
for(j in c(1:length(alive))) {
if(!is.na(alive[j])) bAlive[alive[j]:len] <- 1+bAlive[alive[j]:len]
if(!is.na(destroyed[j])) {
bAlive[destroyed[j]:len] <- bAlive[destroyed[j]:len]-1
bDestroyed[destroyed[j]:len] <- 1+bDestroyed[destroyed[j]:len]
}
if(!is.na(cancelled[j])) bCancelled[cancelled[j]:len] <- 1+bCancelled[cancelled[j]:len]
}
#         #extract each player bases information
#         xi <- adJSON[[columnIndex]][[i]][[2]]
#         for(j in c(1:dim(xi)[1])) {
#             if(!is.na(xi[j, 1])) {
#                 pos <- floor(xi[j, 1]/(16*30)+1)
#                 bAlive[pos] <- bAlive[pos] + 1
#                 if(xi[j, 2] < durationFrames) {
#                     pos <- floor(xi[j, 2]/(16*30)+1)
#                     bDestroyed[pos] <- bDestroyed[pos] + 1
#                 }
#             } else {
#                 pos <- floor(xi[j, 2]/(16*30)+1)
#                 bCancelled[pos] <- bCancelled[pos] +1
#             }
#         }
#
#         #adjunt numbers
#         alive <- 0;
#         destroyed <- 0;
#         cancelled <- 0;
#         for(j in c(1:max(int+1))) {
#             alive <- alive + bAlive[j] - bDestroyed[j]
#             destroyed <- destroyed + bDestroyed[j]
#             cancelled <- cancelled + bCancelled[j]
#             bAlive[j] <- alive
#             bDestroyed[j] <- destroyed
#             bCancelled[j] <- cancelled
#         }
## Add to solution
if(i == 1) {
pBases <- data.frame(num_bases = bAlive, bases_destroyed = bDestroyed, bases_cancelled = bCancelled)
basesInfo$p1 <- pBases
} else {
pBases <- data.frame(num_bases = bAlive, bases_destroyed = bDestroyed, bases_cancelled = bCancelled)
basesInfo$p2 <- pBases
}
}
# (end compute created / destroyed)
#return statement
basesInfo
}
## COL(11): Player Bases
bInfo <- basesInfo(adJSON, int, 16, dd[dd$gameID == 6336526, "gameDuration"])
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
View(df2)
rm(xi)
rm(alive, bAlive, bCancelled, bDestroyed, bInfo, cancelled, columnIndex, currentMinerals, currentVespene, destroyed, durationFrames, gameDuration)
rm(j, len, mineralsCollectionRate)
rm(resourcesLost)
rm(supplyData)
rm(vespeneCollectionRate)
View(df2)
View(df1)
#ALL UPGRADES & UNITS => Zerg/terran/protoss
zergJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345542"
terranJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345614"
protossJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345638"
zergJSON <- fromJSON(zergJSON)
terranJSON <- fromJSON(terranJSON)
protossJSON <- fromJSON(protossJSON)
names(zergJSON)
x <- zergJSON[[8]]
length(x)
names(x)
x <- x[[1]]
View(x)
class(x)
x[, 1]

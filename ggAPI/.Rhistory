?flatten
??flatten
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345004"
adJSON <- fromJSON(adJSON)
library(jsonlite)
adJSON <- fromJSON(adJSON)
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345542"
adJSON <- fromJSON(adJSON)
library(jasonlite)
library(jsonlite)
adJSON <- fromJSON(adJSON)
names(adJSON)
x <- adJSON[[8]]
names(x)
x <- x[[1]]
View(x)
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345614"
adJSON <- fromJSON(adJSON)
x <- adJSON[[8]][[1]]
View8x
View(x)
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345638"
adJSON <- fromJSON(adJSON)
View(adJSON[[8]][[1]])
load("~/.RData")
rm(x)
load("~/GitHub/sc2data/ggAPI/.RData")
View(getSimpleDF)
names(dd)
with(df, hist(ifelse(p1_name == "sinH", p1_spending_quotient, p2_spending_quotient)))
x <- ifelse(df$p1_name == "sinH", df$p1_spending_quotient, df$p2_spending_quotient)
View(dd)
sinHID <- 1586656
head(names(df))
load("~/GitHub/sc2data/ggAPI/.RData")
sinHID <- 1586656
head(names(df))
x <- ifelse(df$name == "sinH", df$p1_spending_quotient, df$p2_spending_quotient)
rm(sinHID)
x
x <- ifelse(df$name == "sinH", df$p1_spending_quotient, df$p2_spending_quotient)
x
rm(x)
x <- ifelse(df$name == "sinH", df$p1_spending_quotient, df$p2_spending_quotient)
x
x
which(df$name == "sinH")
library(googlesheets)
library(jsonlite)
library(dplyr)
x <- mutate(df, macro = ifelse(name == "sinH", p1_spending_quotient, p2_spending_quotient))
head(names(df), n=20)
x <- filter(df, name == "sinH")
hist(x$spending_quotient)
rug()
plot(x$spending_quotient, x$minutes)
with(subset(x, spending_quotient < 80), plot(x$spending_quotient, x$minutes))
with(subset(x, spending_quotient < 80), plot(x$spending_quotient, x$minutes))
with(subset(x, spending_quotient < 80), plot(x$spending_quotient, x$minutes))
with(subset(x, spending_quotient < 80), plot(spending_quotient, minutes))
with(x, plot(spending_quotient, minutes))
with(x, plot(spending_quotient, minutes))
with(x, plot(spending_quotient, minutes))
setwd("~/GitHub/sc2data/ggAPI")
if(!require(googlesheets)) install.packages("googlesheets")
if(!require(jsonlite)) install.packages("jsonlite")
if(!require(dplyr)) install.packages("dplyr")
if(!require(ggplot2)) install.packages("ggplot2")
load("~/GitHub/sc2data/ggAPI/.RData")
readGamesGGTracker(1586656, FALSE)
?count
View(count(dd$matchup))
filter(dd, p1_name == "sinH" | p2_name == "sinH") %>% group_by(gameMapName, matchup) %>%
mutate(tGames = length(gameMapName), results = ifelse(p1_name == "sinH", p1_win, p2_win)) %>%
summarise(winratio = mean(results)*100, tGames = max(tGames)) %>%
arrange(gameMapName, matchup, desc(tGames))
mutate(dd, interval = (gameDuration%/%300)*5, pWin = ifelse(p1_name == "sinH", p1_win, p2_win)) %>%
group_by(interval) %>% summarise(winratio = mean(pWin))
with(x, plot(interval, winratio, type="o"))
with(x, lines(interval, winratio))
x <- filter(dd, gameDuration <= 15*60) %>% select(gameID, matchup)
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, 90, ifelse(spending_quotient > 70, 70, 50))) %>%
mutate(matchup = x[match(gameID, x[, 1]), 2]) %>% group_by(interval) %>%
mutate(lengthInterval = length(interval)) %>% group_by(matchup, add = TRUE) %>%
mutate(lengthMatchup = length(matchup)) %>% summarise(matchup_density = sum(lengthMatchup)/sum(lengthInterval))
with(subset(xx, matchup == "TvZ"), plot(interval, matchup_density, col = "blue", type = "l", ylim=c(0, 0.7)))
with(subset(xx, matchup == "PvZ"), points(interval, matchup_density, col = "darkgoldenrod1", type = "l", ylim=c(0, 0.7)))
with(subset(xx, matchup == "ZvZ"), points(interval, matchup_density, col = "firebrick", type = "l", ylim=c(0, 0.7)))
rm(x, xx)
x <- mutate(dd, pCollected = ifelse(p1_name == "sinH", p1_avg_collected, p2_avg_collected)) %>%
mutate(pUnspent = ifelse(p1_name == "sinH", p1_avgUnspent, p2_avgUnspent)) %>%
mutate(pWin = ifelse(p1_name == "sinH", p1_win, p2_win))
x$pWin <- as.factor(x$pWin)
qplot(pCollected, pUnspent, data = x, shape = pWin, color = pWin, geom = c("point", "smooth"))
x <- mutate(dd, pSpending = ifelse(p1_name=="sinH", p1_spending_quotient, p2_spending_quotient)) %>%
mutate(pWin = ifelse(p1_name == "sinH", p1_win, p2_win))
x$pWin <- as.factor(x$pWin)
qplot(pSpending, data = x, geom = "density", color = pWin, facets = . ~ matchup)
x <- mutate(dd, pSpending = ifelse(p1_name=="sinH", p1_spending_quotient, p2_spending_quotient))
qplot(matchup, pSpending, data = x, geom = "boxplot")

?flatten
??flatten
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345004"
adJSON <- fromJSON(adJSON)
library(jsonlite)
adJSON <- fromJSON(adJSON)
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345542"
adJSON <- fromJSON(adJSON)
library(jasonlite)
library(jsonlite)
adJSON <- fromJSON(adJSON)
names(adJSON)
x <- adJSON[[8]]
names(x)
x <- x[[1]]
View(x)
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345614"
adJSON <- fromJSON(adJSON)
x <- adJSON[[8]][[1]]
View8x
View(x)
adJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6345638"
adJSON <- fromJSON(adJSON)
View(adJSON[[8]][[1]])
load("~/.RData")
rm(x)
load("~/GitHub/sc2data/ggAPI/.RData")
View(getSimpleDF)
names(dd)
with(df, hist(ifelse(p1_name == "sinH", p1_spending_quotient, p2_spending_quotient)))
x <- ifelse(df$p1_name == "sinH", df$p1_spending_quotient, df$p2_spending_quotient)
View(dd)
sinHID <- 1586656
head(names(df))
load("~/GitHub/sc2data/ggAPI/.RData")
sinHID <- 1586656
head(names(df))
x <- ifelse(df$name == "sinH", df$p1_spending_quotient, df$p2_spending_quotient)
rm(sinHID)
x
x <- ifelse(df$name == "sinH", df$p1_spending_quotient, df$p2_spending_quotient)
x
rm(x)
x <- ifelse(df$name == "sinH", df$p1_spending_quotient, df$p2_spending_quotient)
x
x
which(df$name == "sinH")
library(googlesheets)
library(jsonlite)
library(dplyr)
x <- mutate(df, macro = ifelse(name == "sinH", p1_spending_quotient, p2_spending_quotient))
head(names(df), n=20)
x <- filter(df, name == "sinH")
hist(x$spending_quotient)
rug()
plot(x$spending_quotient, x$minutes)
with(subset(x, spending_quotient < 80), plot(x$spending_quotient, x$minutes))
with(subset(x, spending_quotient < 80), plot(x$spending_quotient, x$minutes))
with(subset(x, spending_quotient < 80), plot(x$spending_quotient, x$minutes))
with(subset(x, spending_quotient < 80), plot(spending_quotient, minutes))
with(x, plot(spending_quotient, minutes))
with(x, plot(spending_quotient, minutes))
with(x, plot(spending_quotient, minutes))
setwd("~/GitHub/sc2data/ggAPI")
load("~/GitHub/sc2data/ggAPI/.RData")
if(!require(googlesheets)) install.packages("googlesheets")
if(!require(jsonlite)) install.packages("jsonlite")
if(!require(dplyr)) install.packages("dplyr")
if(!require(ggplot2)) install.packages("ggplot2")
readGamesGGTracker(1586656, FALSE)
View(dd)
x <- filter(dd, gameDate == 2016-01-02) %>% select(gameID)
View(x)
x <- filter(dd, gameDate == "2016-01-02") %>% select(gameID)
View(x)
df <- filter(df, !gameID %in% x[, 1])
dd <- filter(dd, !gameID %in% x[, 1])
id <- 1586656
processGame(6367072, FALSE)
processGame(6367067, FALSE)
processGame(6367074, FALSE)
processGame(6367076, FALSE)
processGame(6367071, FALSE)
processGame(6367078, FALSE)
processGame(6367073, FALSE)
processGame(6367066, FALSE)
View(dd)
tail(df)
View(tail(df))
dd <- dd[-c(41)]
dd <- dd[-c(41), ]
adJSON <- paste0("https://gg2-matchblobs-prod.s3.amazonaws.com/", 6367066)
adJSON <- fromJSON(adJSON)
names(adJSON)
columnIndex <- 8
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
x <- adJSON[[8]]
names(x)
x[[1]]
class(x)
x <- x[[1]]
View(x)
x <- adJSON[[8]]
xx <- x[[2]]
View(xx)
names(X)
names(x)
View(x)
length(x[[1]])
length(x[[2]])
iterations <- length(adJSON[[columnIndex]])
iterations
xx <- x[[2]]
xx
View(xx)
length(xx)
computeUpgrades <- function(adJSON, int, columnIndex, races) {
#upgradesInfo: P1 & P2 dataframes
upgradesInfo <- list()
# check varaibles are avaiable
if(!exists("upgrades")) upgrades <- readUpgradesList()
len <- max(int)+1
zergUpgrades <- upgrades[[1]][, 1]
terranUpgrades <- upgrades[[2]][, 1]
protossUpgrades <- upgrades[[3]][, 1]
zLength <- length(zergUpgrades)
tLength <- length(terranUpgrades)
pLength <- length(protossUpgrades)
totalLength <- zLength + tLength + pLength
# compute upgrades
for(i in c(1:length(adJSON[[columnIndex]]))) {
## prepare environment
xi <- adJSON[[columnIndex]][[i]]
pUpgrades <- as.data.frame(matrix(data = rep(NA, len*totalLength), ncol = totalLength, nrow = len))
names(pUpgrades) <- c(zergUpgrades, terranUpgrades, protossUpgrades)
if(length(xi) > 0) {
## Create 0s depending on RACE
if(races[i] == "Z") {
pUpgrades[, 1:zLength] <- 0
} else if(races[i] == "T") {
pUpgrades[, (zLength+1):(zLength+tLength)] <- 0
} else {
pUpgrades[, (zLength+tLength+1):(zLength+tLength+pLength)] <- 0
}
## add upgrades
for(j in c(1:dim(xi)[1])) {
pUpgrades[floor(as.numeric(xi[j, 2])/(16*30)+1), xi[j, 1]] <- 1
}
}
## add uplayer upgrades to list
if(i == 1) upgradesInfo$p1 <- pUpgrades
else upgradesInfo$p2 <- pUpgrades
}
upgradesInfo
}
processGame(6367066, FALSE)
rm(adJSON, columnIndex, id, iterations, x, xx)
rm(int)
processGame(6367066, FALSE)
readGamesGGTracker <- function(id, upload, max = 45) {
##sinHID <- 1586656
upToDate <- FALSE
pageNum <- 1
uploaded <- 0
while(!upToDate & uploaded < max) {
gameList <- paste0("http://api.ggtracker.com/api/v1/matches?category=Ladder&game_type=1v1&identity_id=", id, "&page=", pageNum, "&paginate=true")
gameList <- fromJSON(gameList)
gameList <- gameList[["collection"]][, 1]
pageGames <- match(gameList, dd[, "gameID"])
for(j in c(1:length(pageGames))) {
if(is.na(pageGames[j])) {
processGame(gameList[j], upload)
uploaded <- uploaded + 1
}
else upToDate <- TRUE
}
pageNum <- pageNum + 1
}
}
rm(dd, df)
dd <- createSimpleDF()
df <- createAdvancedDF()
processGame(6336524, dd)
rm(dd, df)
dd <- createSimpleDF()
df <- createAdvancedDF()
processGame(6336524, FALSE)
readGamesGGTracker <- function(id, upload, max = 50) {
##sinHID <- 1586656
upToDate <- FALSE
pageNum <- 1
uploaded <- 0
while(!upToDate & uploaded < max) {
gameList <- paste0("http://api.ggtracker.com/api/v1/matches?category=Ladder&game_type=1v1&identity_id=", id, "&page=", pageNum, "&paginate=true")
gameList <- fromJSON(gameList)
gameList <- gameList[["collection"]][, 1]
pageGames <- match(gameList, dd[, "gameID"])
for(j in c(1:length(pageGames))) {
if(is.na(pageGames[j])) {
processGame(gameList[j], upload)
uploaded <- uploaded + 1
}
else upToDate <- TRUE
}
pageNum <- pageNum + 1
}
}
readGamesGGTracker(1586656, FALSE)
View(tail(df))
View(tail(dd))
x <- mutate(dd, pCollected = ifelse(p1_name == "sinH", p1_avg_collected, p2_avg_collected)) %>%
mutate(pUnspent = ifelse(p1_name == "sinH", p1_avgUnspent, p2_avgUnspent)) %>%
mutate(pWin = ifelse(p1_name == "sinH", p1_win, p2_win))
x$pWin <- as.factor(x$pWin)
qplot(pCollected, pUnspent, data = x, shape = pWin, color = pWin, geom = c("point", "smooth"))
x <- mutate(dd, pSpending = ifelse(p1_name=="sinH", p1_spending_quotient, p2_spending_quotient)) %>%
mutate(pWin = ifelse(p1_name == "sinH", p1_win, p2_win))
x$pWin <- as.factor(x$pWin)
qplot(pSpending, data = x, geom = "density", color = pWin, facets = . ~ matchup)
x <- mutate(dd, pSpending = ifelse(p1_name=="sinH", p1_spending_quotient, p2_spending_quotient)) %>%
mutate(pWin = ifelse(p1_name == "sinH", p1_win, p2_win))
x$pWin <- as.factor(x$pWin)
qplot(pSpending, data = x, geom = "density", color = pWin)
x <- mutate(dd, pSpending = ifelse(p1_name=="sinH", p1_spending_quotient, p2_spending_quotient)) %>%
mutate(oSpending = ifelse(p1_name == "sinH", p2_spending_quotient, p1_spending_quotient)) %>%
mutate(pWin = ifelse(p1_name == "sinH", p1_win, p2_win))
qplot(pSpending, oSpending, data = x, facets = matchup ~ .)
qplot(pSpending, oSpending, data = x, facets = matchup ~ pWin)
## BOXPLOT: numerical vs categorical
x <- mutate(dd, pSpending = ifelse(p1_name=="sinH", p1_spending_quotient, p2_spending_quotient))
qplot(matchup, pSpending, data = x, geom = "boxplot")

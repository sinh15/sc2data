df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(10): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(11): Spending Quotient
p1Income <- df1$minerals_cr + df1$vespene_cr
p2Income <- df2$minerals_cr + df2$vespene_cr
p1Unspent <- df1$minerals + df1$vespene
p2Unspent <- df2$minerals + df2$vespene
df1$spending_quotient <- 35*(0.00137*p1Income - log(p1Unspent))+240
df2$spending_quotient <- 35*(0.00137*p2Income - log(p2Unspent))+240
## COL(12): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(13): Player Bases
gameDuration <- dd[dd$gameID == id, "gameDuration"]*16
bInfo <- basesInfo(adJSON, int, 16, gameDuration)
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
## COL(14): Upgrades
if(p1 == 1) {
races <- c(as.character(dd[dd$gameID == id, "p1_race"]), as.character(dd[dd$gameID == id, "p2_race"]))
} else races <- c(as.character(dd[dd$gameID == id, "p2_race"]), as.character(dd[dd$gameID == id, "p1_race"]))
upgradesInfo <- computeUpgrades(adJSON, int, 8, races)
df1$upgrades <- upgradesInfo[[p1]]
df2$upgrades <- upgradesInfo[[p2]]
## COL(15): Army info
units <- computeArmy(adJSON, int, 6, races, gameDuration)
df1$units <- units[[p1]]
df2$units <- units[[p2]]
## FLATTEN DFs
df1 <- flatten(df1)
df2 <- flatten(df2)
## RBIND
allDF <- rbind(df1, df2)
## UPLOAD: Craete temps and upload ADV. info x PLAYER
if(upload == TRUE) {
temp1 <- paste0("tempFiles/", id, "_", pID_1, ".csv")
temp2 <- paste0("tempFiles/", id, "_", pID_2, ".csv")
df1$minutes <- gsub("\\.", ",", df1$minutes)
df2$minutes <- gsub("\\.", ",", df2$minutes)
df1[, 10] <- gsub("\\.", ",", df1[, 10])
df2[, 10] <- gsub("\\.", ",", df2[, 10])
write.csv(df1, file = temp1, row.names = FALSE)
write.csv(df2, file = temp2, row.names = FALSE)
gs_upload(temp1)
gs_upload(temp2)
}
## RETURN
allDF
}
processGame(6336526, FALSE)
processGame(6350628, FALSE)
processGame(6350630, FALSE)
processGame(6350631, FALSE)
processGame(6350629, FALSE)
processGame(6350633, FALSE)
processGame(6350632, FALSE)
processGame(6353026, FALSE)
processGame(6353025, FALSE)
processGame(6353027, FALSE)
processGame(6353024, FALSE)
processGame(6353023, FALSE)
processGame(6353018, FALSE)
processGame(6353017, FALSE)
processGame(6353020, FALSE)
processGame(6353019, FALSE)
processGame(6353016, FALSE)
View(dd)
rm(dd, df)
extractAdvancedGameDetails <- function(adJSON, id, dd, upload) {
## PREPARE INTERVALS
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
## STORAGE DATA FRAMES
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
## COL(1): Id of the game
df1[, 1] <- id
df2[, 1] <- id
names(df1)[1] <- "gameID"
names(df2)[1] <- "gameID"
## COL(2): Id of the player
pID_1 <- dd[dd$gameID == id, "p1_ID"]
pID_2 <- dd[dd$gameID == id, "p2_ID"]
df1$playerID <- dd[dd$gameID == id, "p1_ID"]
df2$playerID <- dd[dd$gameID == id, "p2_ID"]
## COL(3): Name of the player
df1$name <- dd[dd$gameID == id, "p1_name"]
df2$name <- dd[dd$gameID == id, "p2_name"]
## COL(4): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2$minutes <- df1[, 3]
## COL(5): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1$lost <- resourcesLost[[p1]]
df2$lost <- resourcesLost[[p2]]
## COL(6): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1$workers <- activeWorkers[[p1]]
df2$workers <- activeWorkers[[p2]]
## COL(7): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1$minerals <- currentMinerals[[p1]]
df2$minerals <- currentMinerals[[p2]]
## COL(8): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1$minerals_cr <- mineralsCollectionRate[[p1]]
df2$minerals_cr <- mineralsCollectionRate[[p2]]
## COL(9): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(10): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(11): Spending Quotient
p1Income <- df1$minerals_cr + df1$vespene_cr
p2Income <- df2$minerals_cr + df2$vespene_cr
p1Unspent <- df1$minerals + df1$vespene
p2Unspent <- df2$minerals + df2$vespene
df1$spending_quotient <- 35*(0.00137*p1Income - log(p1Unspent))+240
df2$spending_quotient <- 35*(0.00137*p2Income - log(p2Unspent))+240
## COL(12): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(13): Player Bases
gameDuration <- dd[dd$gameID == id, "gameDuration"]*16
bInfo <- basesInfo(adJSON, int, 16, gameDuration)
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
## COL(14): Upgrades
if(p1 == 1) {
races <- c(as.character(dd[dd$gameID == id, "p1_race"]), as.character(dd[dd$gameID == id, "p2_race"]))
} else races <- c(as.character(dd[dd$gameID == id, "p2_race"]), as.character(dd[dd$gameID == id, "p1_race"]))
upgradesInfo <- computeUpgrades(adJSON, int, 8, races)
df1$upgrades <- upgradesInfo[[p1]]
df2$upgrades <- upgradesInfo[[p2]]
## COL(15): Army info
units <- computeArmy(adJSON, int, 6, races, gameDuration)
df1$units <- units[[p1]]
df2$units <- units[[p2]]
## FLATTEN DFs
df1 <- flatten(df1)
df2 <- flatten(df2)
## RBIND
allDF <- rbind(df1, df2)
## UPLOAD: Craete temps and upload ADV. info x PLAYER
if(upload == TRUE) {
temp1 <- paste0("tempFiles/", id, "_", pID_1, ".csv")
temp2 <- paste0("tempFiles/", id, "_", pID_2, ".csv")
df1$minutes <- gsub("\\.", ",", df1$minutes)
df2$minutes <- gsub("\\.", ",", df2$minutes)
df1[, 10] <- gsub("\\.", ",", df1[, 10])
df2[, 10] <- gsub("\\.", ",", df2[, 10])
write.csv(df1, file = temp1, row.names = FALSE)
write.csv(df2, file = temp2, row.names = FALSE)
gs_upload(temp1)
gs_upload(temp2)
}
## RETURN
allDF
}
gameJSON <- paste0("http://api.ggtracker.com/api/v1/matches/", 6336526, ".json")
gameJSON <- fromJSON(gameJSON)
gameSimple <- extractSimpleGameDetails(gameJSON)
dd <<- rbind(dd, gameSimple)
dd <- createSimpleDF()
df <- createAdvancedDF()
dd <<- rbind(dd, gameSimple)
adJSON <- paste0("https://gg2-matchblobs-prod.s3.amazonaws.com/", 6336526)
adJSON <- fromJSON(adJSON)
id <- 6336526
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
## STORAGE DATA FRAMES
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
df1[, 1] <- id
df2[, 1] <- id
names(df1)[1] <- "gameID"
names(df2)[1] <- "gameID"
names(df1)
View(df1)
## COL(2): Id of the player
pID_1 <- dd[dd$gameID == id, "p1_ID"]
pID_2 <- dd[dd$gameID == id, "p2_ID"]
df1$playerID <- dd[dd$gameID == id, "p1_ID"]
df2$playerID <- dd[dd$gameID == id, "p2_ID"]
## COL(3): Name of the player
df1$name <- dd[dd$gameID == id, "p1_name"]
df2$name <- dd[dd$gameID == id, "p2_name"]
## COL(4): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2$minutes <- df1[, 3]
## COL(5): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1$lost <- resourcesLost[[p1]]
df2$lost <- resourcesLost[[p2]]
## COL(6): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1$workers <- activeWorkers[[p1]]
df2$workers <- activeWorkers[[p2]]
## COL(7): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1$minerals <- currentMinerals[[p1]]
df2$minerals <- currentMinerals[[p2]]
## COL(8): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1$minerals_cr <- mineralsCollectionRate[[p1]]
df2$minerals_cr <- mineralsCollectionRate[[p2]]
## COL(9): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1$vespene <- currentVespene[[p1]]
df2$vespene <- currentVespene[[p2]]
## COL(10): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1$vespene_cr <- vespeneCollectionRate[[p1]]
df2$vespene_cr <- vespeneCollectionRate[[p2]]
## COL(11): Spending Quotient
p1Income <- df1$minerals_cr + df1$vespene_cr
p2Income <- df2$minerals_cr + df2$vespene_cr
p1Unspent <- df1$minerals + df1$vespene
p2Unspent <- df2$minerals + df2$vespene
df1$spending_quotient <- 35*(0.00137*p1Income - log(p1Unspent))+240
df2$spending_quotient <- 35*(0.00137*p2Income - log(p2Unspent))+240
## COL(12): Current Supply & Max Supply
## check if orther of data is crompromized
supplyData <- supplyUsage(adJSON, int, 19)
if(names(adJSON[[19]])[1] == pID_1) {
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
} else {
df1$supply <- supplyData$v2
df2$supply <- supplyData$v1
}
## COL(13): Player Bases
gameDuration <- dd[dd$gameID == id, "gameDuration"]*16
bInfo <- basesInfo(adJSON, int, 16, gameDuration)
if(adJSON[[16]][[1]][[1]] == pID_1) {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
} else {
df1$bases <- bInfo$p1
df2$bases <- bInfo$p2
}
## COL(14): Upgrades
if(p1 == 1) {
races <- c(as.character(dd[dd$gameID == id, "p1_race"]), as.character(dd[dd$gameID == id, "p2_race"]))
} else races <- c(as.character(dd[dd$gameID == id, "p2_race"]), as.character(dd[dd$gameID == id, "p1_race"]))
upgradesInfo <- computeUpgrades(adJSON, int, 8, races)
df1$upgrades <- upgradesInfo[[p1]]
df2$upgrades <- upgradesInfo[[p2]]
## COL(15): Army info
units <- computeArmy(adJSON, int, 6, races, gameDuration)
df1$units <- units[[p1]]
df2$units <- units[[p2]]
names(df1)
names(df2)
source('spreadsheetsConnection.R')
source('builderSimpleDF.R')
source('builderAdvancedDF.R')
source('upgradesAndArmy.R')
source('processGames.R')
## ============================== ##
dd <- createSimpleDF()
df <- createAdvancedDF()
processGame(6336526, FALSE)
processGame(6350628, FALSE)
processGame(6350630, FALSE)
processGame(6350631, FALSE)
processGame(6350629, FALSE)
processGame(6350633, FALSE)
processGame(6350632, FALSE)
processGame(6353026, FALSE)
processGame(6353025, FALSE)
processGame(6353027, FALSE)
processGame(6353024, FALSE)
processGame(6353023, FALSE)
processGame(6353018, FALSE)
processGame(6353017, FALSE)
processGame(6353020, FALSE)
processGame(6353019, FALSE)
processGame(6353016, FALSE)
dd[-dd$gameID == 6336526, ]
head(dd)
dd <- dd[-1, ]
View(dd)
df <- filter(df, gameID != 6336526)
View(head(df))
x <- filter(dd, p1_name == "sinH" | p2_name == "sinH") %>%
mutate(pWin = ifelse(p1_name == "sinH", p1_win, p2_win)) %>%
filter(pWin == 1) %>% select(gameID)
x[, 1]
match(x[, 1], df$gameID)
match(df$gameID, x[, 1])
xx <- filter(df, gameID %in% x[, 1])
y <- filter(dd, p1_name == "sinH" | p2_name == "sinH") %>%
mutate(pWin = ifelse(p1_name == "sinH", p1_win, p2_win)) %>%
filter(pWin == 0) %>% select(gameID)
yy <- filter(df, gameID %in% y[, 1])
380+632
with(xx, plot(minerals_cr, minerals, col = "green"))
with(yy, points(minerals_cr, minerals, col = "red"))
mean(xx$minerals)
mean(yy$minerals)
head(names(df), n=20)
x <- filter(dd, p1_name == "sinH" | p2_name == "sinH") %>%
mutate(pWin = ifelse(p1_name == "sinH", p1_win, p2_win)) %>%
filter(pWin == 1) %>% select(gameID)
y <- filter(dd, p1_name == "sinH" | p2_name == "sinH") %>%
mutate(pWin = ifelse(p1_name == "sinH", p1_win, p2_win)) %>%
filter(pWin == 0) %>% select(gameID)
with(x, plot(minutes, supply.currentSupply, col = "blue"))
x <- filter(df, gameID %>% x[, 1])
x <- filter(dd, p1_name == "sinH" | p2_name == "sinH") %>%
mutate(pWin = ifelse(p1_name == "sinH", p1_win, p2_win)) %>%
filter(pWin == 1) %>% select(gameID)
x <- filter(df, gameID %in% x[, 1])
y <- filter(df, gameID %in% y[, 1])
with(x, plot(minutes, supply.currentSupply, col = "blue"))
with(y, points(minutes, supply.currentSupply, col = "red"))
rm(x, xx, y, yy)
350%/%300
names(dd)
x <- mutate(dd, interval = (gameDuration%/%300)*5)
x <- mutate(dd, interval = (gameDuration%/%300)*5,
pWin = ifelse(p1_name == "sinH", p1_Win, p2_win))
x <- mutate(dd, interval = (gameDuration%/%300)*5, pWin = ifelse(p1_name == "sinH", p1_Win, p2_win))
x <- mutate(dd, interval = (gameDuration%/%300)*5, pWin = ifelse(p1_name == "sinH", p1_win, p2_win))
x <- mutate(dd, interval = (gameDuration%/%300)*5, pWin = ifelse(p1_name == "sinH", p1_win, p2_win)) %>%
group_by(interval) %>% summarise(winratio = mean(pWin))
with(x, plot(interval, winratio, type="n"))
View(x)
with(x, plot(interval, winratio, type="n"))
with(x, lines(interval, winratio))
with(x, plot(interval, winratio, type="o"))
rm(x)
xTerran <- filter(dd, p1_name == "sinH" | p2_name == "sinH", matchup == "TvZ") %>%
select(gameID)
xTerra[, 1]
xTerran[, 1]
xTerran <- filter(dd, p1_name == "sinH" | p2_name == "sinH", matchup == "TvZ") %>%
select(gameID)
xProtoss <- filter(dd, p1_name == "sinH" | p2_name == "sinH", matchup == "PvZ") %>%
select(gameID)
xZerg <- filter(dd, p1_name == "sinH" | p2_name == "sinH", matchup == "ZvZ") %>%
select(gameID)
xTerran <- filter(df, gameID %in% xTerran[, 1])
xProtoss <- filter(df, gameID %in% xProtoss[, 1])
xZerg <- filter(df, gameID %in% xZerg[, 1])
head(names(df))
head(names(df), n=20)
with(xTerran, plot(minutes, spending_quotient, col = "blue"))
with(xProtoss, points(minutes, spending_quotient, col = "yello"))
with(xProtoss, points(minutes, spending_quotient, col = "yellow"))
with(xProtoss, points(minutes, spending_quotient, col = "dark-yellow"))
with(xProtoss, points(minutes, spending_quotient, col = "darkgoldenrod1"))
with(xProtoss, points(minutes, spending_quotient, col = "darkgoldenrod1"))
with(xZerg, points(minutes, spending_quotient, col = "firebrick"))
with(xTerran, plot(minutes, spending_quotient, col = "blue"))
with(xProtoss, points(minutes, spending_quotient, col = "darkgoldenrod1"))
with(xZerg, points(minutes, spending_quotient, col = "firebrick"))
15*60
View(head(df))
x <- filter(dd, gameDuration <= 15*60) %>% select(gameID, matchup)
View(x)
View(x)
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, ifelse(spending_quotient > 70, 70, 50))) %>%
mutate(matchup = x[match(df, x[, 1]), 2])
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, 90, ifelse(spending_quotient > 70, 70, 50))) %>%
mutate(matchup = x[match(df, x[, 1]), 2])
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, 90, ifelse(spending_quotient > 70, 70, 50)))
match(df, x[, 1])
match(df[, ], x[, 1])
match(df$gameID, x[, 1])
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, 90, ifelse(spending_quotient > 70, 70, 50))) %>%
mutate(matchup = x[match(gameID, x[, 1]), 2])
?group_by
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, 90, ifelse(spending_quotient > 70, 70, 50))) %>%
mutate(matchup = x[match(gameID, x[, 1]), 2]) %>% group_by(interval) %>%
mutate(lengthInterval = length(interval)) %>% group_by(matchup, add = TRUE) %>%
mutate(lengthMatchup = length(matchup)) %>% summarise(winratio = lengthMatchup/lengthInterval)
x <- filter(dd, gameDuration <= 15*60) %>% select(gameID, matchup)
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, 90, ifelse(spending_quotient > 70, 70, 50))) %>%
mutate(matchup = x[match(gameID, x[, 1]), 2]) %>% group_by(interval)
xx <- mutate(xx, lengthInterval = length(interval)))
xx <- mutate(xx, lengthInterval = length(interval))
xx <- group_by(xx, matchup, add = TRUE)
xx <- mutate(xx, lengthMatchup = length(matchup))
xx <- summarise(xx, winratio = lengthMatchup/lengthInterval)
?summarise
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, 90, ifelse(spending_quotient > 70, 70, 50))) %>%
mutate(matchup = x[match(gameID, x[, 1]), 2]) %>% group_by(interval) %>%
mutate(lengthInterval = length(interval)) %>% group_by(matchup, add = TRUE) %>%
mutate(lengthMatchup = length(matchup)) %>% summarise(winratio = sum(lengthMatchup)/sum(lengthInterval))
View(xx)
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, 90, ifelse(spending_quotient > 70, 70, 50))) %>%
mutate(matchup = x[match(gameID, x[, 1]), 2]) %>% group_by(interval) %>%
mutate(lengthInterval = length(interval)) %>% group_by(matchup, add = TRUE) %>%
mutate(lengthMatchup = length(matchup)) %>% summarise(matchup_density = sum(lengthMatchup)/sum(lengthInterval))
with(xx, plot())
x <- filter(dd, gameDuration <= 15*60) %>% select(gameID, matchup)
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, 90, ifelse(spending_quotient > 70, 70, 50))) %>%
mutate(matchup = x[match(gameID, x[, 1]), 2]) %>% group_by(interval) %>%
mutate(lengthInterval = length(interval)) %>% group_by(matchup, add = TRUE) %>%
mutate(lengthMatchup = length(matchup)) %>% summarise(matchup_density = sum(lengthMatchup)/sum(lengthInterval))
with(subset(xx, matchup == "TvZ"), plot(interval, matchup_density, col = "blue"))
with(subset(xx, matchup == "PvZ"), plot(interval, matchup_density, col = "darkgoldenrod1"))
with(subset(xx, matchup == "PvZ"), points(interval, matchup_density, col = "darkgoldenrod1"))
with(subset(xx, matchup == "TvZ"), plot(interval, matchup_density, col = "blue"))
with(subset(xx, matchup == "PvZ"), points(interval, matchup_density, col = "darkgoldenrod1"))
with(subset(xx, matchup == "ZvZ"), points(interval, matchup_density, col = "firebrick"))
with(subset(xx, matchup == "TvZ"), plot(interval, matchup_density, col = "blue"))
with(subset(xx, matchup == "PvZ"), points(interval, matchup_density, col = "darkgoldenrod1"))
with(subset(xx, matchup == "PvZ"), plot(interval, matchup_density, col = "darkgoldenrod1"))
with(subset(xx, matchup == "PvZ"), lines
with(subset(xx, matchup == "TvZ"), plot(interval, matchup_density, col = "blue"))
with(subset(xx, matchup == "PvZ"), lines(interval, matchup_density, col = "darkgoldenrod1"))
with(subset(xx, matchup == "ZvZ"), points(interval, matchup_density, col = "firebrick"))
with(subset(xx, matchup == "TvZ"), plot(interval, matchup_density, col = "blue"))
with(subset(xx, matchup == "PvZ"), lines(interval, matchup_density, col = "darkgoldenrod1"))
with(subset(xx, matchup == "ZvZ"), points(interval, matchup_density, col = "firebrick"))
x <- filter(dd, gameDuration <= 15*60) %>% select(gameID, matchup)
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, "+90", ifelse(spending_quotient > 70, "+70", "low"))) %>%
mutate(matchup = x[match(gameID, x[, 1]), 2]) %>% group_by(interval) %>%
mutate(lengthInterval = length(interval)) %>% group_by(matchup, add = TRUE) %>%
mutate(lengthMatchup = length(matchup)) %>% summarise(matchup_density = sum(lengthMatchup)/sum(lengthInterval))
View(xx)
with(subset(xx, matchup == "TvZ"), plot(interval, matchup_density, col = "blue"))
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, "high", ifelse(spending_quotient > 70, "mind", "low"))) %>%
mutate(matchup = x[match(gameID, x[, 1]), 2]) %>% group_by(interval) %>%
mutate(lengthInterval = length(interval)) %>% group_by(matchup, add = TRUE) %>%
mutate(lengthMatchup = length(matchup)) %>% summarise(matchup_density = sum(lengthMatchup)/sum(lengthInterval))
View(xx)
with(subset(xx, matchup == "TvZ"), plot(interval, matchup_density, col = "blue"))
with(subset(xx, matchup == "TvZ"), boxplot(matchup_density ~ interval, col = "blue"))
with(subset(xx, matchup == "TvZ"), boxplot(matchup_density ~ interval, col = "blue"))
with(subset(xx, matchup == "PvZ"), boxplot(matchup_density ~ interval, col = "darkgoldenrod1"))
with(subset(xx, matchup == "ZvZ"), boxplot(matchup_density ~ interval, col = "firebrick"))
xx <- filter(df, gameID %in% x[, 1]) %>%
mutate(interval = ifelse(spending_quotient > 90, 90, ifelse(spending_quotient > 70, 70, 50))) %>%
mutate(matchup = x[match(gameID, x[, 1]), 2]) %>% group_by(interval) %>%
mutate(lengthInterval = length(interval)) %>% group_by(matchup, add = TRUE) %>%
mutate(lengthMatchup = length(matchup)) %>% summarise(matchup_density = sum(lengthMatchup)/sum(lengthInterval))
with(subset(xx, matchup == "TvZ"), lines(matchup_density ~ interval, col = "blue"))
with(subset(xx, matchup == "TvZ"), plot(matchup_density ~ interval, col = "blue", type = "s"))
with(subset(xx, matchup == "TvZ"), plot(matchup_density ~ interval, col = "blue", type = "S"))
with(subset(xx, matchup == "PvZ"), points(matchup_density ~ interval, col = "darkgoldenrod1"))
points(matchup_density ~ interval, col = "darkgoldenrod1"))
points(matchup_density ~ interval, col = "darkgoldenrod1")
with(subset(xx, matchup == "PvZ"), plot(matchup_density ~ interval, col = "darkgoldenrod1"))
with(subset(xx, matchup == "ZvZ"), plot(matchup_density ~ interval, col = "firebrick"))
with(subset(xx, matchup == "PvZ"), plot(matchup_density ~ interval, col = "darkgoldenrod1", type = "s")))
with(subset(xx, matchup == "ZvZ"), plot(matchup_density ~ interval, col = "firebrick", type = "s")))
with(subset(xx, matchup == "PvZ"), plot(matchup_density ~ interval, col = "darkgoldenrod1", type = "s"))
with(subset(xx, matchup == "ZvZ"), plot(matchup_density ~ interval, col = "firebrick", type = "s"))
with(subset(xx, matchup == "TvZ"), plot(matchup_density ~ interval, col = "blue", type = "l"))
with(subset(xx, matchup == "PvZ"), plot(matchup_density ~ interval, col = "darkgoldenrod1", type = "l"))
with(subset(xx, matchup == "ZvZ"), plot(matchup_density ~ interval, col = "firebrick", type = "l"))

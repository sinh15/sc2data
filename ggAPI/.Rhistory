### create empty array to clean sheet data
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
if(length(data) != 0) {
x <- matrix("", nrow = dim(data)[1]+1, ncol = dim(data)[2])
gs_edit_cells(ss, "simpleDF_1", input = x, anchor = "A1")
}
## send new data to sheet
gs_edit_cells(ss, "simpleDF_1", input = dd, anchor = "A1")
}
## ============================== ##
## GET/PRINT: Non saved games     ##
## ============================== ##
synchronizeSimpleDF <- function(dd, action) {
## getSheet
ss <- getSimpleDF()
### get "saved" games
data <- gs_read(ss, "simpleDF_1", range = cell_cols(1))
## Compute differences
if(action == "upload") {
missingGames <- match(dd[, 1], data[[1]])
uploadGames(dd, missingGames, ss)
}
else if(action == "download") {
missingGames <- match(data[[1]], dd[, 1])
dd <- downloadGames(dd, missingGames, ss)
dd
}
}
## ============================== ##
## DOWNLOAD GAMES                 ##
## ============================== ##
downloadGames <- function(dd, missingGames, ss) {
## read full contents and transform
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
missing <- which(is.na(missingGames))
data <- data[missing, ]
data <- factorColumnsSimpleDF(data)
data <- castNormalDF(data)
if(length(missing) != 0) {
for(i in c(1:length(missing))) {
dd <- rbind(dd, data[missing[i], ])
}
}
dd
}
## ============================== ##
## UPLOAD GAMES                   ##
## ============================== ##
uploadGames <- function(dd, missingGames, ss) {
## upload games that are missing
missing <- which(is.na(missingGames))
for(i in c(1:length(missing))) {
dd[, "p1_race"] <- as.character(dd[, "p1_race"])
gs_add_row(ss, "simpleDF_1", input = dd[missing[i], ])
}
}
dd <- createSimpleDF()
gameJSON <- "http://api.ggtracker.com/api/v1/matches/6306072.json"
gameJSON <- fromJSON(gameJSON)
dd <- addGameSimpleDF(dd, gameJSON)
View(lapply(dd, class))
View(dd)
## ============================== ##
## CREATING SINGLE INFO DATAFRAME ##
## ============================== ##
createSimpleDF <- function() {
df <- data.frame(matrix(ncol = 26, nrow = 0))
## Return data frame
df
}
## ============================== ##
## Cast Date Simple DF            ##
## ============================== ##
castDateSimpleDF <- function(dd) {
dd[, 2] <- as.Date(dd[, 2])
## return data frame
dd
}
## ============================== ##
## SIMPLE DF: Adding Row          ##
## ============================== ##
addGameSimpleDF <- function (dd, gameJSON) {
### get data and create row
entities <- gameJSON[["entities"]]
gameDATA <-
list(
gameJSON[["id"]],
gameJSON[["ended_at"]],
gameJSON[["category"]],
gameJSON[["game_type"]],
gameJSON[["duration_seconds"]],
round(gameJSON[["duration_seconds"]]/60, 2),
gameJSON[["map"]][["id"]],
gameJSON[["map"]][["name"]],
gameJSON[["replays"]][, 1],
gameJSON[["replays"]][, 2],
gameJSON[["replays"]][, 3],
computeMatchup(entities[, "race"][1], entities[, "race"][2]),
entities[, "race"][1],
entities[, "race"][2],
entities[, "win"][1],
entities[, "win"][2],
entities[, "identity"][, "id"][1],
entities[, "identity"][, "id"][2],
entities[, "identity"][, "bnet_id"][1],
entities[, "identity"][, "bnet_id"][2],
entities[, "identity"][, "name"][1],
entities[, "identity"][, "name"][2],
entities[, "identity"][, "gateway"][1],
entities[, "identity"][, "gateway"][2],
entities[, "identity"][, "current_league_1v1"][1],
entities[, "identity"][, "current_league_1v1"][2],
entities[["apm"]][1],
entities[["apm"]][2],
entities[["spending_skill"]][1],
entities[["spending_skill"]][2],
entities[["spending_quotient"]][1],
entities[["spending_quotient"]][2],
entities[["race_macro"]][1],
entities[["race_macro"]][2],
entities[["max_creep_spread"]][1],
entities[["max_creep_spread"]][2],
entities[["summary"]][, "average_unspent_resources"][1],
entities[["summary"]][, "average_unspent_resources"][2],
entities[["summary"]][, "resource_collection_rate"][1],
entities[["summary"]][, "resource_collection_rate"][2],
entities[["summary"]][, "workers_created"][1],
entities[["summary"]][, "workers_created"][2],
entities[["summary"]][, "units_trained"][1],
entities[["summary"]][, "units_trained"][2],
entities[["summary"]][, "killed_unit_count"][1],
entities[["summary"]][, "killed_unit_count"][2],
entities[["summary"]][, "structures_built"][1],
entities[["summary"]][, "structures_built"][2],
entities[["summary"]][, "structures_razed_count"][1],
entities[["summary"]][, "structures_razed_count"][2]
)
### add row and return
df <- rbind.data.frame(dd, gameDATA)
x <- nrow(df)
names(df) <-
c("gameID", "gameDate", "gameCategory", "gameType", "gameDuration", "gameDurationM", "gameMapID",
"gameMapName", "replayID", "replayHash", "replayURL", "matchup", "p1_race", "p2_race", "p1_win", "p2_win",
"p1_ID", "p2_ID", "p1_bnetID", "p2_bnetID", "p1_name", "p2_name", "p1_region", "p2_region", "p1_league", "p2_league",
"p1_apm", "p2_apm", "p1_spending_skill", "p2_spending_skill", "p1_spending_quotient", "p2_spending_quotient", "p1_macro", "p2_macro",
"p1_creep", "p2_creep", "p1_avgUnspent", "p2_avgUnspent", "p1_avg_collected", "p2_avg_collected",
"p1_workers", "p2_workers", "p1_units", "p2_units", "p1_units_killed", "p2_units_killed",
"p1_buildings", "p2_buildings", "p1_buildings_razed", "p2_buildings_razed")
## return df
df
}
rm(dd)
dd <- createSimpleDF()
dd <- addGameSimpleDF(dd, gameJSON)
dd <- castDateSimpleDF(dd)
View(dd)
View(lapply(dd, class))
synchronizeSimpleDF(dd, "upload")
synchronizeSimpleDF(dd, "download")
## ============================== ##
synchronizeSimpleDF <- function(dd, action) {
## getSheet
ss <- getSimpleDF()
### get "saved" games
data <- gs_read(ss, "simpleDF_1", range = cell_cols(1))
## Compute differences
if(action == "upload") {
if(length(data) == 0) writeSimpleDataFrameSS(dd)
else {
missingGames <- match(dd[, 1], data[[1]])
uploadGames(dd, missingGames, ss)
}
}
else if(action == "download") {
if(length(data) == 0) readSimpleDataFrameSS()
else {
missingGames <- match(data[[1]], dd[, 1])
dd <- downloadGames(dd, missingGames, ss)
dd
}
}
}
synchronizeSimpleDF(dd, "download")
synchronizeSimpleDF(dd, "upload")
ss <- getSimpleDF()
data <- gs_read(ss, "simpleDF_1", range = cell_cols(1))
## ============================== ##
synchronizeSimpleDF <- function(dd, action) {
## getSheet
ss <- getSimpleDF()
### get "saved" games
data <- gs_read(ss, "simpleDF_1", range = cell_cols(1))
## Compute differences
if(action == "upload") {
missingGames <- match(dd[, 1], data[[1]])
uploadGames(dd, missingGames, ss)
}
else if(action == "download") {
missingGames <- match(data[[1]], dd[, 1])
dd <- downloadGames(dd, missingGames, ss)
dd
}
}
sendSimpleDataFrameSS(dd)
writeSimpleDataFrameSS(dd)
x <- which(lapply(dd, class) == "numeric")
x
class(x)
x
length(x)
x[1]
x <- unclass(which(lapply(dd, class) == "numeric"))
x
x <- which(lapply(dd, class) == "numeric")
class(X)
class(X)
class(x)
class(x[1])
length(x)
dd2 <- dd
dd2[, x] <- as.character(dd2[, x])
View(lapply(dd2, clss))
View(lapply(dd2, class))
View(dd2)
writeSimpleDataFrameSS(dd2)
?gsub
dd2[, x] <- gsub(".", ",", dd2[, x])
View(dd2)
dd2[, x] <- gsub("\.", ",", dd[, x])
dd2[, x] <- gsub("\\.", ",", dd[, x])
View(dd2)
writeSimpleDataFrameSS(dd2)
changeDecimalValue <- function(dd, option) {
x <- which(lapply(dd, class) == "numeric")
if(option == "toComma") dd[, x] <- gsub("\\.", ",", dd[, x])
else if(option == "toDot") dd[, x] <- gsub(",", "\\.", dd[, x])
}
gs_read_csv
?gs_read_csv
changeDecimalValue <- function(dd, option) {
x <- which(lapply(dd, class) == "numeric")
if(option == "toComma") dd[, x] <- gsub("\\.", ",", dd[, x])
else if(option == "toDot") dd[, x] <- gsub(",", "\\.", dd[, x])
dd
}
dd <- readSimpleDataFrameSS()
View(dd)
## ============================== ##
readSimpleDataFrameSS <- function () {
## get spreadsheet
ss <- getSimpleDF()
## read full contents and transform
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
data <- factorColumnsSimpleDF(data)
data <- castNormalDF(data)
data <- changeDecimalValue(data, "toDot")
#return
data
}
View(dd)
dd <- readSimpleDataFrameSS()
View(dd)
View(lapply(dd, class))
readSimpleDataFrameSS <- function () {
## get spreadsheet
ss <- getSimpleDF()
## read full contents and transform
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
data <- factorColumnsSimpleDF(data)
data <- castNormalDF(data)
#return
data
}
dd <- createSimpleDF()
dd <- addGameSimpleDF(dd, gameJSON)
dd <- castDateSimpleDF(dd)
dd <- readSimpleDataFrameSS
dd <- readSimpleDataFrameSS()
View(dd)
View(lapply(dd, class))
rm(x, dd2)
?write.csv
setwd("~/GitHub/sc2data/ggAPI")
write.csv(dd, file = "temp/temps.csv")
write.csv(dd, file = "temps.csv")
write.csv(dd, file = "gameDetails/temps.csv")
?read.table
dd2 <- read.table("temps.csv", sep = ",")
dd2 <- read.table("gameDetails/temps.csv", sep = ",")
View(dd2)
?read.table
default.stringsAsFactors()
dd2 <- read.table("gameDetails/temps.csv", sep = ",", header = TRUE)
View(dd2)
dd2 <- read.csv("gameDetails/temps.csv")
View(dd2)
gs_ls()
x <- gs_ls()
View(x)
gs_ls("simple")
gs_upload("gameDetails/temps.csv", sheet_title = "gameDetails/temps.csv")
x <- "ga_4567846332.csv"
gs_upload("gameDetails/temps.csv", sheet_title = x)
?write.csv
write.csv(dd, file = "gameDetails/temps.csv", row.names = FALSE)
gs_upload("gameDetails/temps.csv", sheet_title = x)
write.csv(dd, file = "gameDetails/temps.csv", row.names = FALSE)
gs_upload("gameDetails/temps.csv", sheet_title = x)
x <- gs_ls()
View(x)
y <- gs_title(x)
x
x <- x[1, 1]
x
class(x)
x <- x[[1]]
x
y <- gs_title(x)
z <- gs_read_csv(y)
View(z)
View(lapply(z, class))
gameJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6306072"
gameJSON <- fromJSON(gameJSON)
names(gameJSON)
class(gameJSON)
View(gameJSON)
x <- gameJSON[[1]]
View(x)
x <- x[[2]]
View(x)
rm(x)
rm(y)
rm(ss)
rm(z)
rm(dd2)
class(gameJSON)
names(gamEJSON)
names(gameJSON)
x <- gameJSON[[7]]
class(x)
names(x)
x <- gameJSON[[8]]
class(x)
names(x)
x <- x[[2]]
names(x)
class(x)
View(x)
y <- gameJSON[[8]][[1]]
View(y)
names(gameJSON)
z <- gameJSON[[9]]
class(z)
names(z)
z <- z[[2]]
View(z)
View(dd)
names(gameJSON)
z <- gameJSON[[2]]
class(z)
names(z)
z <- z[[2]]
View(z)
z <- gameJSON[[2]][[1]]
z
z <- gameJSON[[4]]
class(z)
z
names(z)
z <- z[[2]]
View(z)
names(gameJSON)
View(dd)
View(dd)
View(z)
source('~/.active-rstudio-document')
x <- gameJSON[[5]]
x <- gameJSON[[1]]
View(x)
x <- gameJSON[[5]][[1]]
View(x)
x <- gameJSON[[5]][[2]]
View(x)
x <- gameJSON[[5]][[1]]
View(x)
names(gameJSON)
x <- gameJSON[["engagements"]]
class(x)
View(x)
x <- gameJSON[["aggressions"]]
class(x)
names(x)
x <- x[[2]]
View(x)
class(x)
View(x)
names(gameJSON)
x <- gameJSON[["armies_by_frame"]]
class(x)
names(x)
x <- x[[2]]
View(x)
buildingFunctions.R
"buildingFunctions.R"
Rscript buildingFunctions.R
Rscript "buildingFunctions.R"
source('~/GitHub/sc2data/ggAPI/buildingFunctions.R')
source('~/GitHub/sc2data/ggAPI/buildingFunctions.R', echo=TRUE)
source('~/GitHub/sc2data/ggAPI/buildingFunctions.R')
x[1,1]
x[1,3]
x[1,2]
y <- which(x[,2] < x[, 3])
y
y <- which(x[,2] >) x[, 3])
y <- which(x[,2] >= x[, 3])
y
class(x)
class(x[1, 1])
class(x[1, 2])
class(x[1, 3])
y <- which(as.numeric(x[,2]) >= as.numeric(x[, 3]))
y
x <- gameJSON[["armies_by_frame"]][[1/2]]
x <- gameJSON[["armies_by_frame"]][[1]]
View(x)
names(gameJSON)
x <- gameJSON[["macro"]]
class(x)
namesx
names(x)
names(x)
x
View(x)
names(x)
class(x)
names(gameJSON)
View(gameJSON[["tmacro"]])
View(gameJSON[["tmacro"]][[1]])
x <- gameJSON[["tmacro"]]
class(x)
names(x)
x <- x[[1]]
View(x)
class(x)
names(x)
View(x)
x <- gameJSON[["tmacro"]][[2]]
class(x)
View(x)
names(x)
x <- x[[1]]
names(gameJSON)
x <- gameJSON[["upgrades"]]
class(x)
names(x)
x <- x[[1]]
class(x)
View(x)
x <- gameJSON[["upgrades"]][[2]]
View(x)
x <- gameJSON[["workersActiveCount"]]
class(x)
class()
class(x)
x <- gameJSON[["WorkersActiveCount"]])
names(gameJSON)
x <- gameJSON[["WorkersActiveCount"]]
names(x)
x <- xx[1]
x <- x[[1]]
names(x)
View(x)
nrow(x)
length(x)
x <- gameJSON[["mineralsCurrent"]]
class(x)
names(x)
x <- gameJSON[["MineralsCurrent"]]
names(x)
x <- x[[1]]
View(x)
names(gameJSON)
x <- gameJSON[["MineralsCollectionRate"]]
x <- x[[1]]
View(x)
x <- gameJSON[["locationdiffs"]]
class(x)
names(x)
View(x)
x <- gameJSON[["num_baes"]]
class(x)
class(x)
x <- gameJSON[["num_bases"]]
class(x)
names(x)
View(x)
x <- gameJSON[[16]]
class(x)
names(x)
x <- x[[1]]
View(x)
x <- gameJSON[[16]]
x <- x[[2]]
View(x)
names(gameJSON)
x <- gameJSON[[19]]
class(X)
class(x)
names(x)
x <- x[[1]]
View(x)

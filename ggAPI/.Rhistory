## return df
df
}
rm(df, entities, gameDATA)
dd <- addGameSimpleDF(dd, gameJSON)
## PREPARE INTERVALS
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
pID_1 <- dd[dd$gameID == 6336526, "p1_ID"]
pID_2 <- dd[dd$gameID == 6336526, "p2_ID"]
pID_1
pID_2
df1[, 1] <- dd[, "p1_ID"]
df2[, 1] <- dd[, "p2_ID"]
df1[, 1] <- dd[dd$gameID == 6336526, "p1_ID"]
df2[, 1] <- dd[dd$gameID == 6336526, "p2_ID"]
df1[, 2] <- dd[dd$gameID == 6336526, "p1_name"]
df2[, 2] <- dd[dd$gameID == 6336526, "p2_name"]
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2[, 3] <- df1[, 3]
View(df1)
View(df2)
## COL(4): Resources Lost x interval + position of players
resourcesLost <- computeResourcesLost(adJSON, int)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1[, 4] <- resourcesLost[[p1]]
df2[, 4] <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1[, 5] <- activeWorkers[[p1]]
df2[, 5] <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1[, 6] <- currentMinerals[[p1]]
df2[, 6] <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1[, 7] <- mineralsCollectionRate[[p1]]
df2[, 7] <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1[, 8] <- currentVespene[[p1]]
df2[, 8] <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1[, 9] <- vespeneCollectionRate[[p1]]
df2[, 9] <- vespeneCollectionRate[[p2]]
## COL(10&11): Current Supply & Max Supply
supplyData <- supplyUsage(adJSON, int, 19)
df1[, 10] <- supplyData[[p1]]
df1[, 11] <- supplyData[[p1*2]]
df2[, 10] <- supplyData[[p2]]
df2[, 11] <- supplyData[[p2*2]]
extractMaxs10SecondsBlocks <- function(adJSON, int, columnIndex) {
g30 <- list()
for(i in c(1:length(adJSON[[columnIndex]]))) {
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("toExtract")
g30[i] <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(toExtract = max(toExtract)) %>% select(toExtract)
}
names(g30) <- names(adJSON[[columnIndex]])
g30
}
## ============================== ##
## SUPPLY USAGE DATA EXTRACTION   ##
## ============================== ##
supplyUsage <- function(adJSON, int, columnIndex) {
supply <- list()
for(i in c(1:length(adJSON[[columnIndex]]))) {
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("currentSupply", "maxSupply")
xi <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(currentSupply = max(currentSupply), maxSupply = max(maxSupply))
supply[i] <- select(xi, currentSupply)
supply[i*2] <- select(xi, maxSupply)
}
supply
}
## COL(4): Resources Lost x interval + position of players
resourcesLost <- computeResourcesLost(adJSON, int)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1[, 4] <- resourcesLost[[p1]]
df2[, 4] <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1[, 5] <- activeWorkers[[p1]]
df2[, 5] <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1[, 6] <- currentMinerals[[p1]]
df2[, 6] <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1[, 7] <- mineralsCollectionRate[[p1]]
df2[, 7] <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1[, 8] <- currentVespene[[p1]]
df2[, 8] <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1[, 9] <- vespeneCollectionRate[[p1]]
df2[, 9] <- vespeneCollectionRate[[p2]]
## COL(10&11): Current Supply & Max Supply
supplyData <- supplyUsage(adJSON, int, 19)
df1[, 10] <- supplyData[[p1]]
df1[, 11] <- supplyData[[p1*2]]
df2[, 10] <- supplyData[[p2]]
df2[, 11] <- supplyData[[p2*2]]
resourcesLost <- computeResourcesLost(adJSON, int)
names(adJSON)
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, 5)
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1[, 4] <- resourcesLost[[p1]]
df2[, 4] <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1[, 5] <- activeWorkers[[p1]]
df2[, 5] <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1[, 6] <- currentMinerals[[p1]]
df2[, 6] <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1[, 7] <- mineralsCollectionRate[[p1]]
df2[, 7] <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1[, 8] <- currentVespene[[p1]]
df2[, 8] <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1[, 9] <- vespeneCollectionRate[[p1]]
df2[, 9] <- vespeneCollectionRate[[p2]]
## COL(10&11): Current Supply & Max Supply
supplyData <- supplyUsage(adJSON, int, 19)
df1[, 10] <- supplyData[[p1]]
df1[, 11] <- supplyData[[p1*2]]
df2[, 10] <- supplyData[[p2]]
df2[, 11] <- supplyData[[p2*2]]
View(df1)
View(df2)
rm(df1, df2)
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
pID_1 <- dd[dd$gameID == 6336526, "p1_ID"]
pID_2 <- dd[dd$gameID == 6336526, "p2_ID"]
df1$playerID <- dd[dd$gameID == 6336526, "p1_ID"]
df2$playerID <- dd[dd$gameID == 6336526, "p2_ID"]
View(df1)
View(df1)
rm(df1, df2)
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
View(df1)
df1 <- data.frame()
df1$playerID <- dd[dd$gameID == 6336526, "p1_ID"]
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
df1[, 1] <- dd[dd$gameID == 6336526, "p1_ID"]
df2[, 1] <- dd[dd$gameID == 6336526, "p2_ID"]
View(df1)
names(df1)
names(df1)[1]
names(df1)[1] <- "gameID"
names(df2)[1] <- "gameID"
View(df1)
View(dd)
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1[, 4] <- resourcesLost[[p1]]
df2[, 4] <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1[, 5] <- activeWorkers[[p1]]
df2[, 5] <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1[, 6] <- currentMinerals[[p1]]
df2[, 6] <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1[, 7] <- mineralsCollectionRate[[p1]]
df2[, 7] <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1[, 8] <- currentVespene[[p1]]
df2[, 8] <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1[, 9] <- vespeneCollectionRate[[p1]]
df2[, 9] <- vespeneCollectionRate[[p2]]
## COL(2): Name of the player
df1[, 2] <- dd[dd$gameID == 6336526, "p1_name"]
df2[, 2] <- dd[dd$gameID == 6336526, "p2_name"]
## COL(3): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2[, 3] <- df1[, 3]
## COL(4): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1[, 4] <- resourcesLost[[p1]]
df2[, 4] <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1[, 5] <- activeWorkers[[p1]]
df2[, 5] <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1[, 6] <- currentMinerals[[p1]]
df2[, 6] <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1[, 7] <- mineralsCollectionRate[[p1]]
df2[, 7] <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1[, 8] <- currentVespene[[p1]]
df2[, 8] <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1[, 9] <- vespeneCollectionRate[[p1]]
df2[, 9] <- vespeneCollectionRate[[p2]]
supplyData <- supplyUsage(adJSON, int, 19)
class(supplyData)
length(supplyData)
dim(supplyData)
x <- as.data.farme(supplyData)
x <- as.data.frame(supplyData)
names(adJSON)
x <- adJSON[["SUpplyUsage"]]
class(x)
classx
class(x)
View(x)
x <- adJSON[["SupplyUsage"]]
class(x)
names(x)
x <- x[[1]]
View(x)
?data.frame
supplyDF <- data.frame()
supplyDF$x <- int
cbind(supplyDF, int)
supplyDF <- data.frame(matrix(nrow = max(int)+1))
class(x)
length(adJSON[[19]]
)
supplyUsage2 <- function(adJSON, int, columnIndex) {
supply <- list()
for(i in c(1:length(adJSON[[columnIndex]]))) {
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("currentSupply", "maxSupply")
xi <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(currentSupply = max(currentSupply), maxSupply = max(maxSupply))
supply[i] <- xi
}
supply
}
supplyData <- supplyUsage2(adJSON, int, 19)
columnIndex <- 19
i <- 1
supply <- list()
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("currentSupply", "maxSupply")
xi <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(currentSupply = max(currentSupply), maxSupply = max(maxSupply))
supply[i] <- xi
supply <- c(supply, xi)
View(supply)
xi <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(currentSupply = max(currentSupply), maxSupply = max(maxSupply))
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("currentSupply", "maxSupply")
xi <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(currentSupply = max(currentSupply), maxSupply = max(maxSupply))
View(xi)
supply <- c(supply, xi[, 2:3])
View(supply)
rm(supply)
supply <- list()
supply <- c(supply, xi[, 2:3])
View(supply)
class(supply)
length(supply)
names(supply)
supply$1 <- c(supply, xi[, 2:3])
rm(supply)
supply <- list()
supply$1 <- c(supply, xi[, 2:3])
supply$v1 <- c(supply, xi[, 2:3])
class(supply)
length(supply)
View(supply)
rm(supply)
supply <- list()
supply[, paste0("v", i) <- c(supply, xi[, 2:3])
supply[, paste0("v", i)] <- c(supply, xi[, 2:3])
supply <- list()
supply[, paste0("v", i)] <- c(supply, xi[, 2:3])
supply[, paste0("v", i)] <- xi[, 2:3]
supply <- list()
supply$v1 <- xi[, 2:3]
length(supply)
View(supply)
paste0("v", 1)
supply[, paste0("v",i)] <- xi[, 2:3]
supplyUsage2 <- function(adJSON, int, columnIndex) {
supply <- list()
for(i in c(1:length(adJSON[[columnIndex]]))) {
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("currentSupply", "maxSupply")
xi <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(currentSupply = max(currentSupply), maxSupply = max(maxSupply))
if(i == 1) supply$v1 <- xi[, 2:3]
else supply$v2 <- xi[, 2:3]
}
supply
}
rm(x, xi, supplyDF)
rm(i)
supplyData <- supplyUsage2(adJSON, int, 19)
class(supplyData)
length(supplyData)
class(supplyData[[1]])
class(suuplyData[[1]][[1]])
class(supplyData[[1]][[1]])
View(supplyData)
View(supplyData[[1]])
x <- suuplyData[[1]]
x <- supplyData[[1]]
names(x)
class(x)
columnIndex <- 19
i <- 1
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("currentSupply", "maxSupply")
xi <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(currentSupply = max(currentSupply), maxSupply = max(maxSupply))
class(xi)
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
class(xi)
names(xi) <- c("currentSupply", "maxSupply")
class(xi)
xi <- mutate(xi, interval = int)
class(xi)
xi <- group_by(xi, interval)
class(xi)
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
rm(columnIndex, i, xi)
columnIndex <- 19
i <- 1
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("currentSupply", "maxSupply")
xi <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(currentSupply = max(currentSupply), maxSupply = max(maxSupply))
xi <- castNormalDF(xi)
class(i)
class(xi)
if(i == 1) supply$v1 <- xi[, 2:3]
rm(supply, columnIndex, i)
rm(xi)
supplyUsage2 <- function(adJSON, int, columnIndex) {
supply <- list()
for(i in c(1:length(adJSON[[columnIndex]]))) {
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("currentSupply", "maxSupply")
xi <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(currentSupply = max(currentSupply), maxSupply = max(maxSupply))
xi <- castNormalDF(xi)
if(i == 1) supply$v1 <- xi[, 2:3]
else supply$v2 <- xi[, 2:3]
}
supply
}
supplyData <- supplyUsage2(adJSON, int, 19)
class(supplyData)
length(supplyData)
names(supplyData)
df1[, 10] <- supplyData$v1
View(df1)
df1$supply <- supplyData$v1
View(df1)
class(df1[, "supply"])
supplyUsage <- function(adJSON, int, columnIndex) {
supply <- list()
for(i in c(1:length(adJSON[[columnIndex]]))) {
xi <- as.data.frame(adJSON[[columnIndex]][[i]])
names(xi) <- c("currentSupply", "maxSupply")
xi <- mutate(xi, interval = int) %>% group_by(interval) %>%
summarize(currentSupply = max(currentSupply), maxSupply = max(maxSupply))
xi <- castNormalDF(xi)
if(i == 1) supply$v1 <- xi[, 2:3]
else supply$v2 <- xi[, 2:3]
}
supply
}
rm(supplyUsage2)
View(df1)
rm(df1, df2)
rm(activeWorkers, currentMinearls, currentVespene, int, p1, p2, pID_1, pID_2)
rm(currentMinerals, mineralsCollectionRate, vespeneCollectionRate)
rm(supplyData)
rmresourcesLost
rm(resourcesLost)
gc()+
gc()
## PREPARE INTERVALS
int <- array(1:length(adJSON[["Lost"]][[1]]))
int <- apply(int, 1, function(i) ((i-1)*10)%/%30)
## STORAGE DATA FRAMES
df1 <- data.frame(matrix(nrow = max(int)+1))
df2 <- data.frame(matrix(nrow = max(int)+1))
## COL(1): Id of the player
pID_1 <- dd[dd$gameID == 6336526, "p1_ID"]
pID_2 <- dd[dd$gameID == 6336526, "p2_ID"]
df1[, 1] <- dd[dd$gameID == 6336526, "p1_ID"]
df2[, 1] <- dd[dd$gameID == 6336526, "p2_ID"]
names(df1)[1] <- "gameID"
names(df2)[1] <- "gameID"
## COL(2): Name of the player
df1[, 2] <- dd[dd$gameID == 6336526, "p1_name"]
df2[, 2] <- dd[dd$gameID == 6336526, "p2_name"]
## COL(3): Minute of game
df1[, 3] <- mutate(as.data.frame(int), minutes = int*30/60) %>% group_by(minutes) %>% summarize(max(minutes)) %>% select(minutes)
df2[, 3] <- df1[, 3]
## COL(4): Resources Lost x interval + position of players
resourcesLost <- extractMaxs10SecondsBlocks(adJSON, int, 5)
if(names(resourcesLost)[1] == pID_1) {
p1 <- 1
p2 <- 2
} else {
p1 <- 2
p2 <- 1
}
df1[, 4] <- resourcesLost[[p1]]
df2[, 4] <- resourcesLost[[p2]]
## COL(5): Active Workers
activeWorkers <- extractMaxs10SecondsBlocks(adJSON, int, 9)
df1[, 5] <- activeWorkers[[p1]]
df2[, 5] <- activeWorkers[[p2]]
## COL(6): Current Minerals
currentMinerals <- extractMaxs10SecondsBlocks(adJSON, int, 11)
df1[, 6] <- currentMinerals[[p1]]
df2[, 6] <- currentMinerals[[p2]]
## COL(7): Current Minerals Collection Rate
mineralsCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 12)
df1[, 7] <- mineralsCollectionRate[[p1]]
df2[, 7] <- mineralsCollectionRate[[p2]]
## COL(8): Current Vespene Gas
currentVespene <- extractMaxs10SecondsBlocks(adJSON, int, 15)
df1[, 8] <- currentVespene[[p1]]
df2[, 8] <- currentVespene[[p2]]
## COL(9): Current Vespene Gas Collection Rate
vespeneCollectionRate <- extractMaxs10SecondsBlocks(adJSON, int, 17)
df1[, 9] <- vespeneCollectionRate[[p1]]
df2[, 9] <- vespeneCollectionRate[[p2]]
## COL(10): Current Supply & Max Supply
supplyData <- supplyUsage(adJSON, int, 19)
df1$supply <- supplyData$v1
df2$supply <- supplyData$v2
View(df1)
rm(x)
x <- gameJSON[["upgrades"]][[1/2]]
names(x)
class(x)
x <- adJSON[["upgrades"]][[1/2]]
names(x)
class(x)
View(x)
View(dd[dd$gameID == 6336526, ])
flatten(supplyData)
flatten(supplyData[[1]])
View(flatten(df1))
dfx <- flatten(Df1)
dfx <- flatten(df1)
names(dfx)

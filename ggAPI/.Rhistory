dd[, 26] <- as.factor(dd[, 26])
dd
}
data <- factorColumnsSimpleDF(data)
data[, 2]
data[, 2] <- as.date[, 2]
data[, 2] <- as.Date(data[, 2])
data[, 3] <- as.factor(data[, 2])
data[, 3] <- as.factor(data[, 3])
dd[, 3] <- as.factor(dd[, 3])
class(dd[, 3])
View(data)
View(dd)
class(dd)
class(data)
data[[, 3]] <- as.factor(data[[, 3]])
data[[, 3]]
data[[3]]
factorColumnsSimpleDF <- function(dd) {
##dd[, 2] <- as.Date(dd[, 2])
dd[[3]] <- as.factor(dd[[3]])
dd[[4]] <- as.factor(dd[[4]])
dd[[8]] <- as.factor(dd[[8]])
dd[[10]] <- as.factor(dd[[10]])
dd[[11]] <- as.factor(dd[[11]])
dd[[12]] <- as.factor(dd[[12]])
dd[[13]] <- as.factor(dd[[13]])
dd[[14]] <- as.factor(dd[[14]])
dd[[21]] <- as.factor(dd[[21]])
dd[[22]] <- as.factor(dd[[22]])
dd[[23]] <- as.factor(dd[[23]])
dd[[24]] <- as.factor(dd[[24]])
dd[[25]] <- as.factor(dd[[25]])
dd[[26]] <- as.factor(dd[[26]])
dd
}
data <- factorColumnsSimpleDF(data)
View(data)
factorColumnsSimpleDF <- function(dd) {
dd[[2]] <- as.Date(dd[[2]])
dd[[3]] <- as.factor(dd[[3]])
dd[[4]] <- as.factor(dd[[4]])
dd[[8]] <- as.factor(dd[[8]])
dd[[10]] <- as.factor(dd[[10]])
dd[[11]] <- as.factor(dd[[11]])
dd[[12]] <- as.factor(dd[[12]])
dd[[13]] <- as.factor(dd[[13]])
dd[[14]] <- as.factor(dd[[14]])
dd[[21]] <- as.factor(dd[[21]])
dd[[22]] <- as.factor(dd[[22]])
dd[[23]] <- as.factor(dd[[23]])
dd[[24]] <- as.factor(dd[[24]])
dd[[25]] <- as.factor(dd[[25]])
dd[[26]] <- as.factor(dd[[26]])
dd
}
data <- factorColumnsSimpleDF(data)
View(lapply(data, class))
View(lapply(dd, class))
ss <- getSimpleDF()
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
View(data)
View(lapply(data, class))
factorColumnsSimpleDF <- function(dd) {
dd[[2]] <- as.Date(dd[[2]])
dd[[3]] <- as.factor(dd[[3]])
dd[[4]] <- as.factor(dd[[4]])
dd[[8]] <- as.factor(dd[[8]])
dd[[10]] <- as.factor(dd[[10]])
dd[[11]] <- as.factor(dd[[11]])
dd[[12]] <- as.factor(dd[[12]])
dd[[13]] <- as.factor(dd[[13]])
dd[[14]] <- as.factor(dd[[14]])
dd[[21]] <- as.factor(dd[[21]])
dd[[22]] <- as.factor(dd[[22]])
dd[[23]] <- as.factor(dd[[23]])
dd[[24]] <- as.factor(dd[[24]])
dd
}
dim(data)
dim(data)[2]
castToNormalDF <- function(dd) {
col <- dim(dd)[2]
dataFrame <- data.frame()
for(i in c(1:col)) {
dataFrame[, i] <- dd[[i]]
}
dataFrame
}
data <- castToNormalDF(data)
dim(data)[2]
dataFrame <- data.frame()
dataFrame[, 1] <- data[[1]]
castToNormalDF <- function(dd) {
col <- dim(dd)[2]
row <- dim(dd)[1]
dataFrame <- data.frame(matrix(ncol = col, nrow = row))
for(i in c(1:col)) {
dataFrame[, i] <- dd[[i]]
}
dataFrame
}
data <- castToNormalDF(data)
class(data)
View(data)
castToNormalDF <- function(dd) {
col <- dim(dd)[2]
row <- dim(dd)[1]
dataFrame <- data.frame(matrix(ncol = col, nrow = row))
names(dataFrame) <- names(dd)
for(i in c(1:col)) {
dataFrame[, i] <- dd[[i]]
}
dataFrame
}
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
data <- factorColumnsSimpleDF(data)
data <- castToNormalDF(data)
View(data)
View(dd)
data[1, ]
dd <- rbind(dd, data[1, ])
dd <- rbind(dd, data[1, ])
dd <- rbind(dd, data[1, ])
dd <- rbind(dd, dd[4], ])
dd <- rbind(dd, dd[4, ])
View(dd)
dd <- dd[-c(2:5),]
View(dd)
?match
sendDataFrameSS <- function (dd) {
## getSheet
ss <- getSimpleDF()
### create empty array to clean sheet data
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
x <- matrix("", nrow = dim(data)[1]+1, ncol = dim(data)[2])
gs_edit_cells(ss, "simpleDF_1", input = x, anchor = "A1")
## send new data to sheet
gs_edit_cells(ss, "simpleDF_1", input = dd, anchor = "A1")
}
data <- gs_read(ss, "simpleDF_1", range = "A2:A")
data <- gs_read(ss, "simpleDF_1", range = "A2:A10")
data <- gs_read(ss, "simpleDF_1", range = "A:A")
data <- gs_read(ss, "simpleDF_1", range = cell_cols(1))
View(data)
View(data)
class(Data)
class(data)
dim(data)
data <- castNormalDF(data)
castNormalDF <- function(dd) {
col <- dim(dd)[2]
row <- dim(dd)[1]
dataFrame <- data.frame(matrix(ncol = col, nrow = row))
names(dataFrame) <- names(dd)
for(i in c(1:col)) {
dataFrame[, i] <- dd[[i]]
}
dataFrame
}
data <- castNormalDF(data)
clasS(data)
class(data)
x <- match(dd[, 1], data[, 1])
x
dd[, 1]
data <- gs_read(ss, "simpleDF_1", range = cell_cols(1))
data[[]]
data[[1]]
y <- c(10, 15, 20, 25, 40, 50, 44, 32)
x <- match(y, data[[1]])
x
y
data[[1]]
x
length(x)
missingSS <- match(dd[, 1], data[[1]])
missingLOCAL <- match(data[[1]], dd[, 1])
missingSS
missingLOCAL
missingGames <- match(dd[, 1], data[[1]])
length(missingGames)
is.na(missingGames[1])
length(data)
data
length(data[[1]])
missingGames
x <- c(1, NA, 2, NA, NA, 10)
x
y <- is.na(x)
y
?which
which(is.na(x))
y <- which(is.na(x))
length(y)
library(googlesheets)
library(jsonlite)
library(dplyr)
dd <- createSimpleDF()
## ============================== ##
## FORMAT: Factoring Columns      ##
## ============================== ##
factorColumnsSimpleDF <- function(dd) {
dd[[2]] <- as.Date(dd[[2]])
dd[[3]] <- as.factor(dd[[3]])
dd[[4]] <- as.factor(dd[[4]])
dd[[8]] <- as.factor(dd[[8]])
dd[[10]] <- as.factor(dd[[10]])
dd[[11]] <- as.factor(dd[[11]])
dd[[12]] <- as.factor(dd[[12]])
dd[[13]] <- gsub("TRUE", "T", dd[[13]])
dd[[14]] <- gsub("TRUE", "T", dd[[14]])
dd[[13]] <- as.factor(dd[[13]])
dd[[14]] <- as.factor(dd[[14]])
dd[[21]] <- as.factor(dd[[21]])
dd[[22]] <- as.factor(dd[[22]])
dd[[23]] <- as.factor(dd[[23]])
dd[[24]] <- as.factor(dd[[24]])
dd
}
## ============================== ##
## FORMAT: Cast to normal DF      ##
## ============================== ##
castNormalDF <- function(dd) {
col <- dim(dd)[2]
row <- dim(dd)[1]
dataFrame <- data.frame(matrix(ncol = col, nrow = row))
names(dataFrame) <- names(dd)
for(i in c(1:col)) {
dataFrame[, i] <- dd[[i]]
}
dataFrame
}
## ============================== ##
## GET: Simple DF Spreadsheet     ##
## ============================== ##
getSimpleDF <- function() {
ssURL <- "https://docs.google.com/spreadsheets/d/1kvE8NW4cPP2zZH2IO0VTmzYDR1-fI3uQyqIHMcicB4A/edit#gid=0"
ss <- gs_url(ssURL, lookup = NULL, visibility = NULL, verbose = TRUE)
ss
}
## ============================== ##
## READ: Full Data Frame from SS  ##
## ============================== ##
readSimpleDataFrameSS <- function () {
## get spreadsheet
ss <- getSimpleDF()
## read full contents and transform
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
data <- factorColumnsSimpleDF(data)
data <- castNormalDF(data)
#return
data
}
## ============================== ##
## PRINT: Full Data Frame to SS   ##
## ============================== ##
writeSimpleDataFrameSS <- function (dd) {
## getSheet
ss <- getSimpleDF()
### create empty array to clean sheet data
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
if(length(data) != 0) {
x <- matrix("", nrow = dim(data)[1]+1, ncol = dim(data)[2])
gs_edit_cells(ss, "simpleDF_1", input = x, anchor = "A1")
}
## send new data to sheet
gs_edit_cells(ss, "simpleDF_1", input = dd, anchor = "A1")
}
## ============================== ##
## GET/PRINT: Non saved games     ##
## ============================== ##
synchronizeSimpleDF <- function(dd, action) {
## getSheet
ss <- getSimpleDF()
### get "saved" games
data <- gs_read(ss, "simpleDF_1", range = cell_cols(1))
## Compute differences
if(action == "upload") {
missingGames <- match(dd[, 1], data[[1]])
uploadGames(dd, missingGames, ss)
}
else if(action == "download") {
missingGames <- match(data[[1]], dd[, 1])
dd <- downloadGames(dd, missingGames, ss)
dd
}
}
## ============================== ##
## DOWNLOAD GAMES                 ##
## ============================== ##
downloadGames <- function(dd, missingGames, ss) {
## read full contents and transform
data <- gs_read_csv(ss, "simpleDF_1", verbose = TRUE)
missing <- which(is.na(missingGames))
data <- data[missing, ]
data <- factorColumnsSimpleDF(data)
data <- castNormalDF(data)
if(length(missing) != 0) {
for(i in c(1:length(missing))) {
dd <- rbind(dd, data[missing[i], ])
}
}
dd
}
## ============================== ##
## UPLOAD GAMES                   ##
## ============================== ##
uploadGames <- function(dd, missingGames, ss) {
## upload games that are missing
missing <- which(is.na(missingGames))
for(i in c(1:length(missing))) {
dd[, "p1_race"] <- as.character(dd[, "p1_race"])
gs_add_row(ss, "simpleDF_1", input = dd[missing[i], ])
}
}
## ============================== ##
## CREATING SINGLE INFO DATAFRAME ##
## ============================== ##
createSimpleDF <- function() {
df <- data.frame(matrix(ncol = 26, nrow = 0))
## Return data frame
df
}
## ============================== ##
## Cast Date Simple DF            ##
## ============================== ##
castDateSimpleDF <- function(dd) {
dd[, 2] <- as.Date(dd[, 2])
## return data frame
dd
}
## ============================== ##
## SIMPLE DF: Adding Row          ##
## ============================== ##
addGameSimpleDF <- function (dd, gameJSON) {
### get data and create row
entities <- gameJSON[["entities"]]
gameDATA <-
list(
gameJSON[["id"]],
gameJSON[["ended_at"]],
gameJSON[["category"]],
gameJSON[["game_type"]],
gameJSON[["duration_seconds"]],
round(gameJSON[["duration_seconds"]]/60, 2),
gameJSON[["map"]][["id"]],
gameJSON[["map"]][["name"]],
gameJSON[["replays"]][, 1],
gameJSON[["replays"]][, 2],
gameJSON[["replays"]][, 3],
computeMatchup(entities[, "race"][1], entities[, "race"][2]),
entities[, "race"][1],
entities[, "race"][2],
entities[, "win"][1],
entities[, "win"][2],
entities[, "identity"][, "id"][1],
entities[, "identity"][, "id"][2],
entities[, "identity"][, "bnet_id"][1],
entities[, "identity"][, "bnet_id"][2],
entities[, "identity"][, "name"][1],
entities[, "identity"][, "name"][2],
entities[, "identity"][, "gateway"][1],
entities[, "identity"][, "gateway"][2],
entities[, "identity"][, "current_league_1v1"][1],
entities[, "identity"][, "current_league_1v1"][2]
)
### add row and return
df <- rbind.data.frame(dd, gameDATA)
x <- nrow(df)
names(df) <-
c("gameID", "gameDate", "gameCategory", "gameType", "gameDuration", "gameDurationM", "gameMapID",
"gameMapName", "replayID", "replayHash", "replayURL", "matchup", "p1_race", "p2_race", "p1_win", "p2_win",
"p1_ID", "p2_ID", "p1_bnetID", "p2_bnetID", "p1_name", "p2_name", "p1_region", "p2_region", "p1_league", "p2_league")
## return df
df
}
## ============================== ##
## CRAETE MATCHUP                 ##
## ============================== ##
computeMatchup <- function(race1, race2) {
if(race1 <= race2) matchup = paste0(race1, "v", race2)
else matchup = paste0(race2, "v", race1)
return(matchup)
}
dd <- createSimpleDF()
dd <- synchronizeSimpleDF(dd, "download")
View(dd)
View(dd)
library(jsonlite)
gameJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6306072"
gameJSON <- fromJSON(gameJSON)
names(gameJSON)
x <- gameJSON[[13]]
class(x)
View(x)
x <- gameJSON[["num_bases"]]
x
names(x)
y <- x[[1]]
View(y)
y <- y[[2]
]
View(y)
length(y)
class(y)
dim(y)
y[1][3]
y[1, 3]
d1 <- y[1,1] - y[1,3]
d2 <- y[2,1] - y[2,3]
d3 <- y[3,1] - y[3,3]
d4 <- y[4,1] - y[4,3]
d5 <- y[5,1] - y[5,3]
d1
d2
d3
d4
d5
1600/71
framesPerSecond = 1600/71
framesPerSecond
names(gameJSON)
x <- gameJSON[["num_bases"]]
x[[1]][[1]]
rm(dd)
dd <- createSimpleDF()
gameJSON <- "http://api.ggtracker.com/api/v1/matches/6306072.json"
gameJSON <- fromJSON(gameJSON)
dd <- addGameSimpleDF(dd, gameJSON)
dd <- castDateSimpleDF(dd)
gameJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6306072"
gameJSON <- fromJSON(gameJSON)
View(dd)
framesPerSecond
framesPerSecond * dd[, "gameDuration"]
23444/1465
framesPerSecond2 <- 23444/1465
x <- gameJSON[[6]]
names(x)
x <- x[[2]]
x <- x[[1]]
View(x)
x <- x[[2]]
x <- gameJSON[[6]][[1]]
View(x)
3147/framesPerSecond
3147/framesPerSecond2
3147/framesPerSecond/60
3147%/%framesPerSecond
3147%%framesPerSecond
3147%/%framesPerSecond2
3147%%framesPerSecond2
3147/framesPerSecond
3147/framesPerSecond2
1/0.027
0.0027
1/0.0027
23444/370.37
120+57
177*framesPerSecond2
4*60
242*framesPerSecond2
17*60
6*60
360+39
399*framesPerSecond2
names(gameJSON)
x <- gameJSON[["deathlocations"]]
class(x)
View(x)
384+111
495*2
x <- gameJSON[["SupplyUsage"]]
names(x)
x <- x[[1]]
View(x)
class(x)
dim(x)
1600/65
1600/90
names(gameJSON)
setwd("~/GitHub/sc2data/ggAPI")
source('buildingFunctions.R')
dirname(sys.frame(1)$ofile)
dirname(sys.frame(1)$ofile)
dirname(sys.frame(1)$ofile)
source('spreadsheetsConnection.R')
x <- gameJSON[["Lost"]][[1/2]]
gameJSON <-  "https://gg2-matchblobs-prod.s3.amazonaws.com/6306072"
gameJSON <- fromJSON(gameJSON)
library(jsonlite)
gameJSON <- fromJSON(gameJSON)
x <- gameJSON[["Lost"]][[1/2]]
x <- gameJSON[["Lost"]][[2]]
View(x)
gameJSON <- "http://api.ggtracker.com/api/v1/matches/6306072.json"
dd <- addGameSimpleDF(dd, gameJSON)
dd <- addGameSimpleDF(dd, gameJSON)
gameJSON <- "http://api.ggtracker.com/api/v1/matches/6306072.json"
gameJSON <- fromJSON(gameJSON)
dd <- addGameSimpleDF(dd, gameJSON)
dd <- addGameSimpleDF(dd, gameJSON)
gameJSON <- fromJSON(gameJSON)
gameJSON <- "http://api.ggtracker.com/api/v1/matches/6306072.json"
gameJSON <- fromJSON(gameJSON)
dd <- addGameSimpleDF(dd, gameJSON)
dd <- createSimpleDF()
dd <- addGameSimpleDF(dd, gameJSON)
dd <- castDateSimpleDF(dd)
View(dd)
View(dd)

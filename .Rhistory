rootNode <- xmlRoot(data4)
names(rootNode)
rootNode <- rootNode[[1]]
rootNode <- rootNode[[1]]
names(rootNode)
rootNode <- xmlRoot(data4)
names(rootNode)
length(rootNode)
length(rootNode[[1]])
rootNode <- rootNode[[1]]
names(rootNode)
names(rootNode)
zipCodes <- xpathSApply(rootNode, "//zipcode", xmlValue)
data4 <- xmlTreeParse(fileUrl, useInternalNodes = TRUE)
rootNode <- xmlRoot(data4)
names(rootNode)
rootNode <- rootNode[[1]]
names(rootNode)
zipCodes <- xpathSApply(rootNode, "//zipcode", xmlValue)
table(zipCodes)
sum(zipCodes == 21231)
sum(zipCodes == 21231)
?download.file
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, "housingIdaho.csv")
?fread
??fread
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
View(data)
detach("package:jsonlite", unload=TRUE)
library(data.table)
install.packages(data.table)
install.packages("data.table")
library(data.table)
tables()
DF = data.frame(x.rnorm(9), y=rep(c("a", "b", "c"), each = 3), z=rnorm(9))
DF = data.frame(x=rnorm(9), y=rep(c("a", "b", "c"), each = 3), z=rnorm(9))
head(DF, 3)
DT = data.table(x=rnorm(9), y=rep(c("a", "b", "c"), each = 3), z=rnorm(9))
tables()
DT[2, ]
head(DT)
DT[, 2]
DT[2, ]
names(DT)
DT[, list(mean(x), sum(z))]
class(DT$X)
class(DT$x)
class(DT$y)
DT[, w:=z^2]
names(Dt)
names(DT)
?fread
data5 <- fread("housingIdaho.csv")
tables()
names(data4)
names(data5)
str(data5$pwgtp15 )
str(data5$pwgtp15)
str(data5$SEX)
table(data5$SEX)
DT[,mean(pwgtp15),by=SEX]
data5[,mean(pwgtp15),by=SEX]
setwd(workingDirectory)
install.packages("RMySQL")
library(RMySQL)
library(httr)
oauth_endpoints("github")
oauth_endpoints("github")
myapp <- oaut_app("github",
key = "33b1d4e05e0bc0b111f8",
secret = "8dc36b59ba80d67761ca3de8a7a532e763c05ad2")
# Personal credentials
myapp <- oauth_app("github",
key = "33b1d4e05e0bc0b111f8",
secret = "8dc36b59ba80d67761ca3de8a7a532e763c05ad2")
github_token <- oaut2.0_token(oaut_endpoints("github"), myapp)
github_token <- oauth2.0_token(oaut_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages(httpuv)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
str(req)
length(req)
req2 <- jsonlite::fromJSON(toJSON(req))
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
library("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
req2 <- jsonlite::fromJSON(toJSON(req))
req2 <- fromJSON(req)
req2 <- fromJSON(GET("https://api.github.com/users/jtleek/repos", gtoken))
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
## Question 1. Api connection and data processing
library(httr)
# Find Oaut Settings
oauth_endpoints("github")
# Personal credentials
myapp <- oauth_app("github",
key = "33b1d4e05e0bc0b111f8",
secret = "8dc36b59ba80d67761ca3de8a7a532e763c05ad2")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req2 <- fromJSON(GET("https://api.github.com/users/jtleek/repos", gtoken))
req2 <- fromJSON("https://api.github.com/users/jtleek/repos")
install.packages("curl")
req2 <- fromJSON("https://api.github.com/users/jtleek/repos")
names(req2)
req2[req2$name == "datasharing"]
req2[req2$name == "datasharing", ]
class(req2[req2$name == "datasharing", ])
req3 <- req2[req2$name == "datasharing", ]
names(req3)
req3[, "created_at"]
?nchar()
?nchar
x <- 1:10
nchar(x)
x <- c("HOLA", "HOLA2")
nchar(x)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
head(htmlCode)
class(htmlCode)
class(1)
class(htmlCode[1])
nchar(htmlCode[1])
?vapply
?read.lines
?readLines
nchar(10)
nchar(htmlCode[10])
?nchar
nchar(htmlCode[10], htmlCode[20])
nchar(c(htmlCode[10], htmlCode[20])
)
nchar(c(htmlCode[10], htmlCode[20], htmlCode[30], htmlCode[100]))
close(con)
nchar(c(htmlCode[10], htmlCode[20], htmlCode[30], htmlCode[100]))
?read.foo
?read.for
?read.for
??read.for
getwd()
workingDirectory <- getwd()
workingDirectory
setwd("~/GitHub/data-science/c03/W2")
ls
ls()
read.fortran("getdata-wksst8110.for")
q5 <- read.fwf("getdata-wksst8110.for")
q5 <- read.fwf("getdata-wksst8110.for",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4)))
q5 <- read.fwf("getdata-wksst8110.for",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(q4)
head(q5)
?sum
sum(q5[, 4])
setwd(workingDirectory)
x <- c(1,3,5,7)
var(x)
?var
length(x)
mean(x)
16/44
16/4
x
y <- c(9, 1, 1, 9)
sum(y)
20/4
20/3
sd(x)
rankall <- function(outcome, num = "best") {
## Read Outocme Data
data <- read.csv(file="outcome-of-care-measures.csv", header=T, sep=",", colClasses = "character")
## Check outcome is valid
if(outcome == "heart attack") cOutcome <- 11
else if(outcome == "heart failure") cOutcome <- 17
else if(outcome == "pneumonia") cOutcome <- 23
else stop("invalid outcome")
## For each state find the hospital of the given rank
levels <- sort(unique(data[, 7]))
result <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(result) <- c("hospital", "state")
for(i in c(1:length(levels))) {
## we create smaller dd
stateData <- data[data$State == levels[i], ]
## we prepare for loop
dRows <- nrow(stateData)
vOutcome = numeric()
vHospital = character()
count = 1
for(j in c(1:dRows)) {
if(stateData[j, cOutcome] != "Not Available") {
vOutcome[count] <- as.numeric(stateData[j, cOutcome])
vHospital[count] <- stateData[j, 2]
count = count + 1
}
}
## we combine and sort the results
rMatrix <- cbind(vHospital, vOutcome)
rMatrix <- as.matrix(rMatrix[order(as.numeric(rMatrix[,2]), rMatrix[,1]), ])
## we select with hospital goes to the data frame
if(num == "best") result[i, ] <- c(rMatrix[1, 1], levels[i])
else if(num == "worst") result[i, ] <- c(rMatrix[nrow(rMatrix), 1], levels[i])
else if(num <= nrow(rMatrix)) result[i, ] <- c(rMatrix[num], levels[i])
else result[i, ] <- c("<NA>", levels[i])
}
## Return a data frame with the hospital names and state
result
}
?melt
instal.packages("reshape2")
install.packages("reshape2")
library(reshape)
library(reshape2)
head(mtcars)
rownames(mtcars)
numrow(mtcars)
numrows(mtcars)
nrow(mtcars)
cars2 <- mtcars
cars2$carname <- rownames(cars2)
rownames(cars2)
head(cars2)
?melt
cars2 <- melt(cars2, id=c("carname", "gears", "cyl"), measure.vars=C("mpg", "hp"))
cars2 <- melt(cars2, id=c("carname", "gears", "cyl"), measure.vars=C("mpg", "hp"))
cars2 <- melt(cars2, id=c("carname","gears","cyl"),measure.vars=C("mpg","hp"))
cars3 <- melt(cars2, id=c("carname","gears","cyl"),measure.vars=C("mpg","hp"))
cars3 <- melt(cars2, id=c("carname","gears","cyl"),measure.vars=c("mpg","hp"))
cars3 <- melt(cars2, id=c("carname","gears","cyl"),measure.vars=c("mpg","hp"))
cars3 <- melt(cars2, id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
head(cars3)
rownames(cars3)
?tapplt
?tapply
install.packages("dyplr")
library(dyplr)
install.packages("plyr")
?ddply
chicago <- readRDS("chicaco.rds")
colnames(cars3)
colnames(cars3)[2]
colnames(cars3])[2] <- "gear2"
colnames(cars3)[2] <- "gear2"
names(cars3)
?merge
# Introduction
?subste
?subset
windows()
jpeg()
xfig()
postscript()
?$par
?par
windows()
x <- colors()
View(x)
?Devices
downloadData <- function() {
## download Data if required
if(!file.exists("DATA")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileUrl, "data.zip")
unzip("data.zip", exdir = "DATA")
}
}
## ===================================== ##
## CREATE PLOT NUMBER 1                  ##
## ===================================== ##
## Donwload Data
downloadData()
## Read data, modify it and subset it if it does not exist
library(dplyr)
Sys.setlocale(locale = "uK")
df <- read.table("DATA/household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", stringsAsFactors = FALSE)
df2 <- filter(df, Date == "1/2/2007" | Date == "2/2/2007") %>%
mutate(Date = as.Date(Date, format = "%d/%m/%Y")) %>%
mutate(dateTime = as.POSIXct(paste(Date, Time)))
## Start Ploting System
png(file = "plot1.png", width = 480, height = 480)
## Creating Plot
hist(df2$Global_active_power, col = "red",
main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
## Finish Plot
dev.off()
## ===================================== ##
## CREATE PLOT NUMBER 1                  ##
## ===================================== ##
## Donwload Data
downloadData()
## Read data, modify it and subset it if it does not exist
library(dplyr)
Sys.setlocale(locale = "uK")
df <- read.table("DATA/household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", stringsAsFactors = FALSE)
df2 <- filter(df, Date == "1/2/2007" | Date == "2/2/2007") %>%
mutate(Date = as.Date(Date, format = "%d/%m/%Y")) %>%
mutate(dateTime = as.POSIXct(paste(Date, Time)))
## Start Ploting System
png(file = "plot1.png", width = 480, height = 480)
## Creating Plot
hist(df2$Global_active_power, col = "red",
main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
## Finish Plot
dev.off()
## ===================================== ##
## CREATE PLOT NUMBER 2                  ##
## ===================================== ##
## Donwload Data
downloadData()
## Read data, modify it and subset it if it does not exist
library(dplyr)
Sys.setlocale(locale = "uK")
df <- read.table("DATA/household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", stringsAsFactors = FALSE)
df2 <- filter(df, Date == "1/2/2007" | Date == "2/2/2007") %>%
mutate(Date = as.Date(Date, format = "%d/%m/%Y")) %>%
mutate(dateTime = as.POSIXct(paste(Date, Time)))
## Start Ploting System
png(file = "plot2.png", width = 480, height = 480)
## Creating Plot
plot(df2$dateTime, df2$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)")
## Finish Plot
dev.off()
## ===================================== ##
## CREATE PLOT NUMBER 3                  ##
## ===================================== ##
## Donwload Data
downloadData()
## Read data, modify it and subset it if it does not exist
library(dplyr)
Sys.setlocale(locale = "uK")
df <- read.table("DATA/household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", stringsAsFactors = FALSE)
df2 <- filter(df, Date == "1/2/2007" | Date == "2/2/2007") %>%
mutate(Date = as.Date(Date, format = "%d/%m/%Y")) %>%
mutate(dateTime = as.POSIXct(paste(Date, Time)))
## Start Ploting System
png(file = "plot3.png", width = 480, height = 480)
## Creating Plot
plot(df2$dateTime, df2$Sub_metering_1, type = "l", ylab = "Energy sub metering", xlab = "")
lines(df2$dateTime, df2$Sub_metering_2, type = "l", col = "red")
lines(df2$dateTime, df2$Sub_metering_3, type = "l", col = "blue")
## Add Legend
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty = 1, lwd = 2)
## Finish Plot
dev.off()
## ===================================== ##
## CREATE PLOT NUMBER 4                  ##
## ===================================== ##
## Donwload Data
downloadData()
## Read data, modify it and subset it if it does not exist
library(dplyr)
Sys.setlocale(locale = "uK")
df <- read.table("DATA/household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", stringsAsFactors = FALSE)
df2 <- filter(df, Date == "1/2/2007" | Date == "2/2/2007") %>%
mutate(Date = as.Date(Date, format = "%d/%m/%Y")) %>%
mutate(dateTime = as.POSIXct(paste(Date, Time)))
## Start Ploting System
png(file = "plot4.png", width = 480, height = 480)
## Create Structure for plot
par(mfrow = c(2, 2),mar=c(4,4,2,1))
## Create first plot
plot(df2$dateTime, df2$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power")
## Create second plot
plot(df2$dateTime, df2$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
## Create third plot
plot(df2$dateTime, df2$Sub_metering_1, type = "l", ylab = "Energy sub metering", xlab = "")
lines(df2$dateTime, df2$Sub_metering_2, type = "l", col = "red")
lines(df2$dateTime, df2$Sub_metering_3, type = "l", col = "blue")
## Create forth plot
plot(df2$dateTime, df2$Global_reactive_power, type = "l", xlab = "datetame", ylab = "Global_reactive_power")
## Finish Plot
dev.off()
x <- xyplot()
library.packges(lattice)
library.packges("attice")
library.packges("lattice")
library.packages("lattice")
library.packages(lattice)
library.packages(lattice)
library.packages("lattice")
install.packages("laticce")
library(lattice)
x <- xyplot()
install.packages("nlme")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
x <- xyplot(weight ~ Time | Diet, BodyWeight)
str(nlme)
str(x)
class(x)
text("HELLO")
axis("HELLO")
?text
text(1, 1, labels = "HELLO")
str(Bodyweight)
str(BodyWeight)
x <- xyplot(weight ~ Time | Diet, BodyWeight)
plot(x)
xyplot(weight ~ Time | Diet, BodyWeight)
?lpoints
?lines
?text
?axis
?splom
?print.trellis
?trellis.par.set
?par
?splom
?print.trellis
?trellis.par.set
?lpoints
?text
plot(x)
text(10, 600, labels = "hola")
?lpoints
install.packages("ggplot2")
library(ggplo2)
library(ggplot2)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
plot(p)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
?qplot
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
?read.xlsx
??read.xlsx
install.packageS("xlsx")
install.packageS("xlsx)
install.packageS(xlsx)
install.packages("xlsx")
packages(xlsx)
library(xlsx)
library(dplyr)
?read.xlsx
?read.xlsx
library(xlsx)
install.packages("xlsx")
install.packages("xlsx")
?read.xlsx
??read.xlsx
library(xlsx)
?read.xlsx
setwd("~/GitHub/sc2data")
dd <- read.xlsx("data.xlsx", 1, header=TRUE)
rm(airquality, p, x)
str(dd)
dd <- read.xlsx("data.xlsx", 1)
str(dd)
dd <- read.xlsx("data.xlsx", 1, colClasses=c(factor, factor, character))
str(dd)
dd[, name]
dd[, "name"]
dd[, "name"] <- as.character(dd[, "name"])
str(dd)
dd[, "name"]
nrow(dd[, "baLight"] == NA)
nrow(dd[, "baLight"] is NA)
nrow(is.na(dd[, "baLight"]))
dd[, "baLight"]
sum(is.na(dd[. "baLight"]))
y <- is.na(dd[, "baLight"])
y
summary(dd)
names(dd)
mean(dd[dd$transformation == 0 & dd$type == unit, "minerals"])
dd[dd$transformation == 0, ]
dd[dd$transformation == 0 & dd$type == "unit", ]
mean(dd[dd$transformation == 0 & dd$type == "unit", "minerals"])
mean(dd[dd$transformation == 0 & dd$type == "unit", ])
mean(dd[dd$transformation == 0 & dd$type == "unit", "minerals"])
mean(dd[dd$transformation == 0 & dd$type == "unit", "minerals"])
min(dd[dd$transformation == 0 & dd$type == "unit", "minerals"])
max(dd[dd$transformation == 0 & dd$type == "unit", "minerals"])
